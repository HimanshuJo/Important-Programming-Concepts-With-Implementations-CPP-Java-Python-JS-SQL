Big Oh notation (O):

	Big O notation is a mathematical notation that describes the 
	limiting behavior of a function when the argument tends towards a 
	particular value or infinity.

	Big oh notation is used to describe asymptotic upper bound. 

	Mathematically, if f(n) describe running time of an algorithm; 
		f(n) is O(g(n)) if there exist positive constant c and (n0) such that 

			0 <= f(n) <= c g(n) for all n >= n0

	n = used to give upper bound an a function.

	If a function is O(n), it is automatically O(n-square) as well !

	E.g.:

		A typical algorithm that has the complexity of O(n²) would be the selection sort algorithm.

		Selection sort is a sorting algorithm that iterates through the list to ensure every element at index i is the ith smallest/largest element of the list

			e.g.

				vector<int>arr{3, 6, 2, 4, 1, 5, 7};
				for(int i=0; i<n; ++i){
					for(int j=i; j<n; ++j){
						if(arr[j]<arr[i]){
							swap(arr[i], arr[j]);
						}
					}
				}

-------

Big Omega notation (Ω):

	Just like O notation provide an asymptotic upper bound, 
		Ω notation provides asymptotic lower bound. 

	Let f(n) define running time of an algorithm; 

		f(n) is said to be Ω(g(n)) if there exists positive constant c and (n0) such that:

			0 <= c g(n) <= f(n) for all n >= n0

	n = used to given lower bound on a function

	If a function is O(n-square) it is automatically O(n) as well.

-------

 Big Theta notation (Θ):

 	Let f(n) define running time of an algorithm. 

		f(n) is said to be Θ(g(n)) if f(n) is O(g(n)) and f(n) is Ω(g(n)) 

	Mathematically:

		0 <= f(n) <= C1 g(n) for n >= n0

		0 <= C2 g(n) <= f(n) for n >= n0

The equation simply means there exist positive constants C1 and C2 such that
	f(n) is sandwich between C2 g(n) and C1 g(n).

-------

Difference Between Big O, Big Omega and Big Theta:
 
	Big O

		It is like <=
			
		Rate of growth of an algorithm is less than or equal to a specific value

		The upper bound of algorithm is represented by Big O notation. 

			Only the above function is bounded by Big O.
			
			Asymptotic upper bond is given by Big O notation.

		Big O (O) – Worst case

		Big-O is a measure of the longest amount of time it could possibly take for the algorithm to complete.

		Mathematically – Big O is:
			0 <= f(n) <= c g(n) for all n >= n0

	-------

	Big Omega

	 	It is like >= 
		
		Rate of growth is greater than or equal to a specified value

		The algorithm’s lower bound is represented by Omega notation. 

			The asymptotic lower bond is given by Omega notation

		Big Omega (Ω) – Best case

		Big- Ω is take a small amount of time as compare to Big-O it could 
		possibly take for the algorithm to complete.

		Mathematically – Big Omega is:

			0 <= C g(n) <= f(n) for all n >= n0

	-------

	Big Theta

		It is like == 
		
		Meaning the rate of growth is equal to a specified value

		The bounding of function from above and below is represented by theta notation. 

			The exact asymptotic behavior is done by this theta notation.

		Big Theta (Θ) – Average case

		Big- Θ is take very short amount of time as compare to Big-O and Big-? 
		it could possibly take for the algorithm to complete.

		Mathematically – Big Theta is:

			0 <= C2 g(n) <= f(n) <= C1 g(n) for n >= n0