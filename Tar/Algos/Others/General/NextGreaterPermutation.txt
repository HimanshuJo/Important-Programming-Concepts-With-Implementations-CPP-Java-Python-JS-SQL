
“In mathematics, a permutation of a set is, loosely speaking, an arrangement of its members into a sequence or linear order, or if the set is already ordered, a rearrangement of its elements. 

The word “permutation” also refers to the act or process of changing the linear order of an ordered set.”

So, as the definition say, permutation means rearranging a set of given objects in all the possible orders. 

	As we can see in the above diagram, 'three' different colors can be arranged in 6 ways i.e. 

		{RGB, RBG, GRB, GBR, BRG, BGR}.

-------

There are many ways to systematically generate all permutations of a given sequence. 

	One classic algorithm is based upon finding the next permutation in 
		lexicographical/dictionary/alphabetical order, if it exists.

-------

So, the problem statement here is, we are given a set of alphabets maybe we can call it a string, 
	and we have to find the next lexicographical set of alphabets or next lexicographical greater 
	string or the string that will come next in the dictionary after the current string 
	having the same set of alphabets as in the current string.

	-------

	Let’s take an example of numbers to understand better.

		Number = [4,5,2,6,7,3,1]

		Next greater number will be = [4,5,2,7,1,3,6 ]

-------

Brute Force:

	First thing that will come to our mind is, find all the permutations of the given number 
		and the smallest of those permutations which is also greater than our current 
		number will be our answer

	As we saw above, there are n! possibilities (n=number of digits in number), 
		considering all the digits as distinct, so if we go on finding all the permutations for a given number, it will take O(n!) time to compute. 

		That’s a heavy time complexity if the n is a large number

-------

Optimization:

	We need to think how we can improve on this. 

	If we observe carefully, maybe for a smaller set of numbers, we might see a patterns. 

	Let’s try with a few examples:

		[2,1,3] = next greater number is 231

		[1,1,5] = next greater number is 151

		[2,3,5,4] = next greater number is 2435

		[3,2,1] = we can’t form a number greater than the current number from all the possible permutations
			here as the numbers are in decreasing order, from any permutation we can't form a number greater
			than the current number

-------

Takeaways from the above observation:

	Case 1: [3,2,1]

		Here we start moving from right end and try to find the first decreasing element, 
			so that we can replace it with the element greater than itself 
			from the right side of it.

		in this case the condition is not satisfied

	-------

	Case 2: [2, 3, 5, 4]

		nums 	2	3	5	4
		index	0	1	2	3

		we can start travelling from right to left but with index (len - 2) so that we can compare the last no also
			we compare nums[i] with nums[i + 1]  --> 5 > 4 so the decreasing no. contraint doesn't satisfies here

		we then move to index 1 and compare nums[i] with nums[i + 1]
			here 3 < 5 so the decreasing no. constraint satisfies here

			we stop at this number

		-------

		Next we will again travel from right to left and find the next element that is greater than 3
			and swap their position

			we will create a global variable temp = INT_MAX

				and compare each number from the right whether it is less than temp
					if so than swap the numbers

		After swapping our array looks like this

			nums 	2	4	5	3

			** Here important point to note that, nums present after num 4 or index 1
				are already sorted in descending order, so we can just reverse them to find the next
				larger permutation

		Finally the array looks like this

			nums 	2	4	3	5

-------

Code snippet:

	private void nextPermutation(int[] nums) {
		if (nums.length < 2) return;

		int firstDecreasing = -1;

		for (int i = nums.length - 2; i >= 0; --i) {
			if (nums[i] < nums[i + 1]) {
				firstDecreasing = i
				break;
			}
		}

		if (firstDecreasing != -1) {
			int temp = -1

			// find the index where we can swap the firstDecreasing
			for (int i = firstDecreasing + 1; i < nums.length; ++i) {
				if (nums[i] > nums[firstDecreasing]) {
					temp = temp != -1 && nums[temp] < nums[i] ? temp : i;
				} else {
					break;
				}
			}

			int current = nums[temp];
			nums[temp] = nums[firstDecreasing];
			nums[firsDecreasing] = current;
		}

		reverse(nums, firstDecreasing + 1);
	}

-------

Time Complexity:

	O(n)

		to find the next decreasing element in the worst case,

			e.g. [1, 5, 4, 3, 2]

			+ O(n)

				to find the next greater number in the remaining sub array on the right

			+ O(1)

				to swap the first decreasing element with the next larger element

			+ O(n / 2)

				to reverse the sub array from i + 1 to len to sort into ascending order

Space Complexity:

	O(1)

		No extra space is required
