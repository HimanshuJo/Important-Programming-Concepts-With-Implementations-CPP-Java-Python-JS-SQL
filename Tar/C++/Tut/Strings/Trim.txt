Using find_first_not_of() with find_last_not_of() function

#include <iostream>
#include <string>
#include <algorithm>
 
const std::string WHITESPACE = " \n\r\t\f\v";
 
std::string ltrim(const std::string &s)
{
    size_t start = s.find_first_not_of(WHITESPACE);
    return (start == std::string::npos) ? "" : s.substr(start);
}
 
std::string rtrim(const std::string &s)
{
    size_t end = s.find_last_not_of(WHITESPACE);
    return (end == std::string::npos) ? "" : s.substr(0, end + 1);
}
 
std::string trim(const std::string &s) {
    return rtrim(ltrim(s));
}
 
int main()
{
    std::string s = "\n\tHello World  \r\n";
    std::cout << "START::" << trim(s) << "::END";
 
    return 0;
}

-------

Using std::find_if function

#include <iostream>
#include <string>
#include <algorithm>
 
std::string& ltrim(std::string &s)
{
    auto it = std::find_if(s.begin(), s.end(),
                    [](char c) {
                        return !std::isspace<char>(c, std::locale::classic());
                    });
    s.erase(s.begin(), it);
    return s;
}
 
std::string& rtrim(std::string &s)
{
    auto it = std::find_if(s.rbegin(), s.rend(),
                    [](char c) {
                        return !std::isspace<char>(c, std::locale::classic());
                    });
    s.erase(it.base(), s.end());
    return s;
}
 
std::string& trim(std::string &s) {
    return ltrim(rtrim(s));
}
 
int main()
{
    std::string s = "\n\t Hello World  ";
    std::cout << "START::" << trim(s) << "::END";
 
    return 0;
}

-------

Using regex

#include <iostream>
#include <string>
#include <regex>
 
std::string ltrim(const std::string &s) {
    return std::regex_replace(s, std::regex("^\\s+"), std::string(""));
}
 
std::string rtrim(const std::string &s) {
    return std::regex_replace(s, std::regex("\\s+$"), std::string(""));
}
 
std::string trim(const std::string &s) {
    return ltrim(rtrim(s));
}
 
int main()
{
    std::string s = " \t\n  Hello World  ";
    std::cout << "START::" << trim(s) << "::END";
 
    return 0;
}
