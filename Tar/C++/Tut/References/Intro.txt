References in C++:

	When a variable is declared as a reference, it becomes an alternative name for an existing variable. 

	A variable can be declared as a reference by putting ‘&’ in the declaration.

-------

#include<iostream>
using namespace std;

int main()
{
	int x = 10;

	// ref is a reference to x.
	int& ref = x;

	// Value of x is now changed to 20
	ref = 20;
	cout << "x = " << x << endl ;

	// Value of x is now changed to 30
	x = 30;
	cout << "ref = " << ref << endl ;

	return 0;
}

Output: 

	x = 20
	ref = 30

-------

Applications :  

    1. Modify the passed parameters in a function: 

		If a function receives a reference to a variable, it can modify the value of the variable. 

		For example, the following program 	variables are swapped using references.

		-------

		Example:

			#include<iostream>
			using namespace std;

			void swap (int& first, int& second)
			{
				int temp = first;
				first = second;
				second = temp;
			}

			int main()
			{
				int a = 2, b = 3;
				swap(a, b);
				cout << a << " " << b;
				return 0;
			}

		Output:

			3 2

	-------

	2. Avoiding a copy of large structures: 

		Imagine a function that has to receive a large object. 

		If we pass it without reference, a new copy of it is created which causes wastage of CPU time and memory. 

		We can use references to avoid this.

		-------

		Example:

			struct Student {
				string name;
				string address;
				int rollNo;
			}

			// If we remove & in below function, a new
			// copy of the student object is created.
			// We use const to avoid accidental updates
			// in the function as the purpose of the function
			// is to print s only.
			void print(const Student &s)
			{
				cout << s.name << " " << s.address << " " << s.rollNo;
			}

	-------

	3. In For Each Loops to modify all objects: 

		We can use references in for each loops to modify all elements

		-------

		Example:

			#include <bits/stdc++.h>
			using namespace std;

			int main()
			{
				vector<int> vect{ 10, 20, 30, 40 };

				// We can modify elements if we
				// use reference
				for (int &x : vect)
					x = x + 5;

				for (int x : vect)
				cout << x << " ";

				return 0;
			}

	-------

	4. For Each Loop to avoid the copy of objects: 

		We can use references in each loop to avoid a copy of individual objects when objects are large.

		-------

		Example:

			#include <bits/stdc++.h>
			using namespace std;

			int main()
			{
				vector<string> vect{"geeksforgeeks practice",
								"geeksforgeeks write",
								"geeksforgeeks ide"};

				// We avoid copy of the whole string
				// object by using reference.
				for (const auto &x : vect)
				cout << x << endl;

				return 0;
			}

-------

References vs Pointers:

	Both references and pointers can be used to change local variables of one function inside another function. 

	Both of them can also be used to save copying of big objects when passed as arguments to functions or 
		returned from functions, to get efficiency gain. 

	Despite the above similarities, there are the following differences between references and pointers.

	-------

	1. A pointer can be declared as void but a reference can never be void.

		For example

			int a = 10;
			void* aa = &a;. //it is valid
			void &ar = a; //it is not valid

	2. The pointer variable has n-levels/multiple levels of indirection 
		i.e. single-pointer, double-pointer, triple-pointer. 

		Whereas, the reference variable has only one/single level of indirection. 

		The following code reveals the mentioned points:

			#include <iostream>
			using namespace std;

			int main() {
				int i=10; //simple or ordinary variable.
				int *p=&i; //single pointer
				int **pt=&p; //double pointer
				int ***ptr=&pt; //triple pointer
				// All the above pointers differ in the value they store or point to.
				cout << "i=" << i << "\t" << "p=" << p << "\t"
					<< "pt=" << pt << "\t" << "ptr=" << ptr << "\n";
				int a=5; //simple or ordinary variable
				int &S=a;
				int &S0=S;
				int &S1=S0;
				cout << "a=" << a << "\t" << "S=" << S << "\t"
					<< "S0=" << S0 << "\t" << "S1=" << S1 << "\n";
				// All the above references do not differ in their values
				// as they all refer to the same variable.
			}

			/*
				Sample output:

				i=10    
				p=0x3fb55ff7bc  
				pt=0x3fb55ff7b0     
				ptr=0x3fb55ff7a8
				-------
				a=5     
				S=5     
				S0=5    
				S1=5
			*/

-------

References are less powerful than pointers:

	1) Once a reference is created, it cannot be later made to reference another object; 

		it cannot be reseated. This is often done with pointers.

	2) References cannot be NULL. 

		Pointers are often made NULL to indicate that they are not pointing to any valid thing.

	3) A reference must be initialized when declared. 

		There is no such restriction with pointers

	-------

	* Due to the above limitations, references in C++ cannot be used for implementing data structures 
		like Linked List, Tree, etc.

	* In Java, references don’t have the above restrictions and can be used to implement all data structures. 

		References being more powerful in Java is the main reason Java doesn’t need pointers.

	-------

	References are safer and easier to use:

	1) Safer: 

		Since references must be initialized, wild references like wild pointers are unlikely to exist. 

		It is still possible to have references that don’t refer to a valid location:

	2) Easier to use: 

		References don’t need a dereferencing operator to access the value. 

		They can be used like normal variables. ‘&’ operator is needed only at the time of declaration. 

		Also, members of an object reference can be accessed with dot operator (‘.’), 
			unlike pointers where arrow operator (->) is needed to access members.

-------

Example 1:

	#include<iostream>
	using namespace std;

	int &fun()
	{
		static int x = 10;
		return x;
	}

	int main()
	{
		fun() = 30;
		cout << fun();
		return 0;
	}

	Output: 30

-------

Example 2:

	#include <iostream>
	using namespace std;

	int fun(int &x)
	{
	    x += 1;
	    return x;
	}

	int main()
	{
	    int a = 10;
	    cout << fun(a) << "\n";
	    return 0;
	}

	-------

	// here the function fun is basically taking reference of 'a' and not creating an entire new variable
	// then performing operation

	Output: 11

-------

Example 3:

	#include<iostream>
	using namespace std;

	int fun(int &x)
	{
		return x;
	}

	int main()
	{
		cout << fun(10);
		return 0;
	}

	Output:

		// We are not passing anything as a reference
		// We are passing an int value directly so the fun has nothing to make a reference of
		Error.

-------

When do we pass arguments by reference or pointer?

	In C++, variables are passed by reference due to following reasons:

		1) To modify local variables of the caller function: 

			A reference (or pointer) allows called function to modify a local variable of the caller function. 

			For example, consider the following example program where fun() is able to modify 
				local variable x of main().

			-------

			#include <bits/stdc++.h>
			using namespace std;

			void fun(int& x) { x = 20; }

			int main()
			{
				int x = 10;
				fun(x);
				cout << "New value of x is " << x;
				return 0;
			}

			Output: 
				
				New value of x is 20

		-------

		2) For passing large sized arguments: 

			If an argument is large, passing by reference (or pointer) is more efficient because only an address 
				is really passed, not the entire object. 

			For example, let us consider the following Employee class and a 
				function printEmpDetails() that prints Employee details.

			-------

			class Employee {
			private:
				string name;
				string desig;

				// More attributes and operations
			};

			void printEmpDetails(Employee emp)
			{
				cout << emp.getName();
				cout << emp.getDesig();

				// Print more attributes
			}

			* The problem with above code is: every time printEmpDetails() is called, 
				a new Employee object is constructed that involves creating a copy of all data members. 

				So a better implementation would be to pass Employee as a reference.

			-------

			void printEmpDetails(const Employee& emp)
			{
				cout << emp.getName();
				cout << emp.getDesig();

				// Print more attributes
			}

		-------

		3) To avoid Object Slicing: 

			If we pass an object of subclass to a function that expects an object of superclass 
				then the passed object is sliced if it is pass by value. 

			For example, consider the following program, it prints “This is Pet Class”.

			-------

			#include <iostream>
			#include <string>

			using namespace std;

			class Pet {
			public:
				virtual string getDescription() const
				{
					return "This is Pet class";
				}
			};

			class Dog : public Pet {
			public:
				virtual string getDescription() const
				{
					return "This is Dog class";
				}
			};

			void describe(Pet p)
			{ // Slices the derived class object
				cout << p.getDescription() << endl;
			}

			int main()
			{
				Dog d;
				describe(d);
				return 0;
			}

			-------

			Output: 
			
				This is Pet Class
			
				If we use pass by reference in the above program then it correctly prints 
					“This is Dog Class”. 

			See the following modified program.

				#include <iostream>
				#include <string>

				using namespace std;

				class Pet {
				public:
					virtual string getDescription() const
					{
						return "This is Pet class";
					}
				};

				class Dog : public Pet {
				public:
					virtual string getDescription() const
					{
						return "This is Dog class";
					}
				};

				void describe(const Pet& p)
				{ // Doesn't slice the derived class object.
					cout << p.getDescription() << endl;
				}

				int main()
				{
					Dog d;
					describe(d);
					return 0;
				}

			Output: 
				
				This is Dog Class
				
				This point is also not valid for basic data types like int, char, .. etc.

		-------

		4) To achieve Run Time Polymorphism in a function

			We can make a function polymorphic by passing objects as reference (or pointer) to it. 

			For example, in the following program, print() receives a reference to the base class object. 

			print() calls the base class function show() if base class object is passed, 
				and derived class function show() if derived class object is passed. 

			-------

			#include <iostream>
			using namespace std;

			class base {
			public:
				virtual void show()
				{ // Note the virtual keyword here
					cout << "In base \n";
				}
			};

			class derived : public base {
			public:
				void show() { cout << "In derived \n"; }
			};

			// Since we pass b as reference, we achieve run time
			// polymorphism here.
			void print(base& b) { b.show(); }

			int main(void)
			{
				base b;
				derived d;
				print(b);
				print(d);
				return 0;
			}

			Output: 
				
				In base 
				
				In derived 