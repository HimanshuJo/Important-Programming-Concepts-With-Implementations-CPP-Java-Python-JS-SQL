Binary exponentiation (also known as exponentiation by squaring) is a trick 
	which allows to calculate a^n using only O(logn) multiplications 
	(instead of O(n) multiplications required by the naive approach).

-------

It also has important applications in many tasks unrelated to arithmetic, since it can be used with any 
	operations that have the property of associativity:

		(X⋅Y)⋅Z = X⋅(Y⋅Z)

	Most obviously this applies to modular multiplication, to multiplication of matrices and to other 
		problems which we will discuss below.

-------

Algorithm

	Raising a to the power of n is expressed naively as multiplication by a done n−1 times: 

		a^n = a⋅a ⋅ … ⋅ a 

		However, this approach is not practical for large a or n

	a^(b+c) = a^b ⋅ a^c

		and 

	a^(2b) = a^b ⋅ a^b = (a^b)^2

	
	The idea of binary exponentiation is, that we split the work using the binary representation of the exponent.

	Let's write n in base 2, for example:
		
		3^13 = 3^1101(base 2)
			 = 3^8 ⋅ 3^4 ⋅ 3^1

	Since the number n has exactly ⌊log2n⌋+1 digits in base 2, we only need to perform O(logn) multiplications, 
		if we know the powers a1, a2, a4, a8, …,a⌊logn⌋

	So we only need to know a fast way to compute those. 

		Luckily this is very easy, since an element in the sequence is just the square of the previous element.

			3^1 = 3

			3^2 = (3^1)^2
				= 3^2
				= 9

			3^4 = (3^2)^2
			    = 9^2
			    = 81

		    3^8 = (3^4)^2
		        = 81^2
		        = 6561

        So to get the final answer for 3^13, we only need to multiply three of them 
        	(skipping 3^2 because the corresponding bit in n is not set): 

        		3^13 = 6561⋅81⋅3
        		     = 1594323

 	The final complexity of this algorithm is O(logn): 
 		we have to compute logn powers of a, and then have to do at most logn multiplications to get the final answer from them.

-------

The following recursive approach expresses the same idea:

	a^n = 1 (if n == 0)

		= (a^(n/2))^2 (if n > 0 and n is even)

		= (a^(n-1)/2)^2 * a (if n > 0 and n is odd)

-------

Implementation:

	long long binpow(long long a, long long b) {
		if (b == 0) {
			return 1;
		}
		long long res = binpow(a, b / 2);
		if (b % 2) {
			return res * res * a;
		} else {
			return res * res;
		}
	}

The second approach accomplishes the same task without recursion.
	
	It computes all the powers in a loop, and multiplies the ones with the corresponding set bit in n

	Although the complexity of both the approaches is identical, this approach will be faster in practice since we have the
		overhead of the recursive calls

		long long binpow(long long a, long long b) {
			long long res = 1;
			while (b > 0) {
				if (b & 1) {
					res = res * a;
				}
				a = a * a;
				b >> 1;
			}
			return res;
		}

-------

Applications

	1. Effective computation of large exponents modulo a number

		Problem: Compute x^n mod m

				This is a very common operation. For instance it is used in computing the modular multiplicative inverse.

		Solution: 

			Since we know that the module operator doesn't interfere with multiplications 
				(a⋅b ≡ (a mod m)⋅(b mod m)(mod m)), 

				we can directly use the same code, and just replace every multiplication with a modular multiplication:

		long long binpow(long long a, long long b, long long m) {
		    a %= m;
		    long long res = 1;
		    while (b > 0) {
		        if (b & 1)
		            res = res * a % m;
		        a = a * a % m;
		        b >>= 1;
		    }
		    return res;
		}

	-------

	2. Effective computation of Fibonacci numbers

	-------

	3. Applying a permutation k times

	-------

	4. Fast application of a set of geometric operations to a set of points