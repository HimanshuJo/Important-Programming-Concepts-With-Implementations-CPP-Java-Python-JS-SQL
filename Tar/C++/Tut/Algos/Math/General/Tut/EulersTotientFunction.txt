Euler's totient function:
	
	also known as phi-function ϕ(n), counts the number of integers between 1 to n inclusive, which are co-prime to n

	Two numbers are co-prime if their greatest common divisor equals 
	1 (1 is considered to be co-prime to any number)

-------

Here are values of ϕ(n) for the first few positive integers:

1 	1
2 	1
3 	2
4 	2
5 	4
6 	2
7 	6
8 	4
9 	6
10 	4
11	10
12	4
13 	12
14  6
15	8
16	8
17	16
18	6
19	18
20	8
21	12

-------

Properties:

	The following properties of Euler totient function are sufficient to calculate it for any number:

		1. If p is a prime number, then gcd(p,q)=1 for all 1≤q<p. 

				Therefore we have: ϕ(p) = p−1.

		2. If p is a prime number and k≥1, then there are exactly p^(k/p) 
			numbers between 1 and p^k that are divisible by p. 

			Which gives us:
				
				ϕ(p^k) = p^k − p^(k−1)

		3. If a and b are relatively prime, then:
				
				ϕ(ab) = ϕ(a) ⋅ ϕ(b)

			This relation is not very trivial to see

			It follows from the 'Chinese Remainder Theorem'

			The CRM guarantees that for each 0 <= x < a and each 0 <= y < b, there exist a unique 0 <= z < ab
				
				with z ≡ x (mod a) and z ≡ y (mod b)

			It's not very hard to show that z is co-prime to ab, if and only if x is coprime to a and y is coprime to b

			Therefore the amount of integers coprime to ab is equal to the amount of a and b

			-------

			In general, for not co-prime a and b, the equation

				ϕ(ab) = ϕ(a) ⋅ ϕ(b) ⋅ d/ϕ(d)

				with d = gcd(a, b) holds

			Thus, using the first three properties, we can compute ϕ(n) through the factorization of n 
				(decomposition of n into a product of its prime factors). 

				If n = p1^a1 ⋅ p2^a2 ⋯ pk^ak, where pi are prime factors of n,

				ϕ(n) = ϕ(p1^a1) ⋅ ϕ(p2^a2) ⋯ ϕ(pk^ak)
					 
					 = (p1^a1 − p1^(a1−1)) ⋅ (p2^a2 − p2^(a2−1)) ⋯ (pk^ak − pk^(ak−1))
					 
					 = p1^a1 ⋅ (1 − 1/p1) ⋅ p2^a2 ⋅ (1 − 1/p2) ⋯ pk^ak ⋅ (1 − 1/pk)

					 = n⋅(1 − 1/p1) ⋅ (1 − 1/p2) ⋯ (1 − 1/pk)

-------

Implementation:

	Implementation using factorization in O(sqrt(n)):

		int phi(int n) {
			int result = n;
			for (int i = 2; i * i <= n; ++i) {
				if (n % i == 0) {
					while (n % i == 0) {
						n /= i;
					}
					result -= result / i;
				}
			}
			if (n > 1) {
				result -= result / n; 
			}
			return result;
		}

-------

Euler totient function from 1 to n in O(nloglogn)

	If we need all the totient of all numbers between 1 and n, then factorizing all n numbers is not efficient. 

	We can use the same idea as the Sieve of Eratosthenes. 

	It is still based on the property shown above, but instead of updating the temporary result for each prime factor for each number, we find all prime numbers and for each one update the temporary results of all numbers that are divisible by that prime number.

	Since this approach is basically identical to the Sieve of Eratosthenes, the complexity will also be the same: O(nloglogn)

		void phi_1_to_n(int n) {
			vector<int> phi(n + 1);
			phi[0] = 0;
			phi[1] = 1;
			for (int i = 2; i <= n; ++i) {
				phi[i] = i;
			}
			for (int i = 2; i <= n; ++i) {
				if (phi[i] == i) {
					for (int j = i; j <= n; j += i) {
						phi[j] -= phi[j] / i;
					}
				}
			}
		}

-------

Divisor sum property

	This interesting property was established by Gauss:

		∑d|n ϕ(d) = n

Here the sum is over all positive divisors d of n

For instance the divisors of 10 are 1, 2, 5 and 10. 

	Hence ϕ(1)+ϕ(2)+ϕ(5)+ϕ(10)=1+1+4+4=10

-------

Finding the totient from 1 to n using the divisor sum property

	The divisor sum property also allows us to compute the totient of all the numbers between 1 to n

	This implementation is a little simpler than the previous implementation based on the 'Sieve of Eratosthenes', however has a slightly worse complexity
		O(n log n)

		void phi_1_to_n(int n) {
			vector<int> phi(n + 1);
			phi[0] = 0;
			phi[1] = 1;
			for (int i = 2; i <= n; ++i) {
				phi[i] = i - 1;
			}
			for (int i = 2; i <= n; ++i) {
				for (int j = 2 * i; j <= n; j += i) {
					phi[j] -= phi[i];
				}
			}
		}

-------

Application in Euler's theorem:

	The most famous and important property of Euler's totient function is expressed in Euler's theorem:
		
		a^ϕ(m) ≡ 1(mod m)

		if a and m are relatively prime.

	In the particular case when m is prime, Euler's theorem turns into Fermat's little theorem:
		
		a^(m−1) ≡ 1(mod m)

	Euler's theorem and Euler's totient function occur quite often in practical applications, for example both are used to compute the modular multiplicative inverse.

	As immediate consequence we also get the equivalence:
		
		a^n ≡ a^(n mod ϕ(m)) (mod m)

	This allows computing (x^n mod m) for very big n, especially if n is the result of another computation, as it allows to compute n under a modulo.