In the mathematical field of graph theory, a bipartite graph (or bigraph):

	is a graph whose vertices can be divided into two disjoint and independent sets U and V 
		such that every edge connects a vertex in U to one in V. 

	Vertex sets U and V are usually called the parts of the graph. 

	Equivalently, a bipartite graph is a graph that does not contain any odd-length cycles.

-------

The two sets U and V may be thought of as a coloring of the graph with two colors: 

	if one colors all nodes in U blue, and all nodes in V green, 
		each edge has endpoints of differing colors, as is required 
		in the graph coloring problem.

	In contrast, such a coloring is impossible in the case of a non-bipartite graph, such as a triangle: 

		after one node is colored blue and another green, the third vertex of the triangle is connected to 
			vertices of both colors, preventing it from being assigned either color.

-------

One often writes G = (U,V,E) to denote a bipartite graph whose partition has 
	the parts U and V with E denoting the edges of the graph. 

	If a bipartite graph is not connected, it may have more than one bipartition. 

	In this case, the (U,V,E) notation is helpful in specifying one particular bipartition that may be 
		of importance in an application. 

	If |U| = |V| that is, if the two subsets have equal cardinality, then 
		G is called a balanced bipartite graph.

	If all vertices on the same side of the bipartition have the same degree, then
		G is called biregular. 

-------

Examples:

	When modelling relations between two different classes of objects, bipartite graphs very often arise naturally. 

	For instance, a graph of football players and clubs, with an edge between a player and a club 
		if the player has played for that club, is a natural example of an affiliation network, 
		a type of bipartite graph used in social network analysis.

	-------

	Another example where bipartite graphs appear naturally is in the (NP-complete) railway optimization problem, 
		in which the input is a schedule of trains and their stops, and the goal is to find a set of train 
		stations as small as possible such that every train visits at least one of the chosen stations. 

	This problem can be modeled as a dominating set problem in a bipartite graph that has a vertex for each train 
		and each station and an edge for each pair of a station and a train that stops at that station.

		e.g. 

			Suppose we have 3 trains:

				FLX 130
				RB 73
				ICE 24

			Suppose we have 4 stations:

				Dortmund
				Düsseldorf
				Köln
				Frankfurt

			-------

			All the three trains, stops at each of these stations (or at least one of them), 
				so our final minimal set of trains is 3

				FLX 130 -> Dortmund
						-> Düsseldorf
						-> Köln
						-> Frankfurt

				...

-------

More abstract examples include the following:

    Every tree is bipartite.

    Cycle graphs with an even number of vertices are bipartite.

    Every planar graph whose faces all have even length is bipartite.

    	Special cases of this are grid graphs and squaregraphs, in which every inner face consists of 4 edges 
    		and every inner vertex has four or more neighbors.

	The complete bipartite graph on m and n vertices, denoted by Kn, m is the bipartite graph 
		G = (U, V, E) where U and V are disjoint sets of size m and n, respectively, and E connects 
		every vertex in U with all vertices in V. 

		It follows that Km,n has mn edges.

		Closely related to the complete bipartite graphs are the crown graphs, formed from complete 
			bipartite graphs by removing the edges of a perfect matching.

    Hypercube graphs, partial cubes, and median graphs are bipartite. 

    	In these graphs, the vertices may be labeled by bit-vectors, in such a way that two vertices are 
    		adjacent if and only if the corresponding bit-vectors differ in a single position. 

		A bi-partition may be formed by separating the vertices whose bit-vectors have an even number of ones 
			from the vertices with an odd number of ones. 

		Trees and square-graphs form examples of median graphs, and every median graph is a partial cube.

-------

Properties:

	Characterization

	Bipartite graphs may be characterized in several different ways:

	    A graph is bipartite if and only if it does not contain an odd cycle.

	    A graph is bipartite if and only if it is 2-colorable, (i.e. its chromatic number is less than or equal to 2).

	    The spectrum of a graph is symmetric if and only if it is a bipartite graph.

-------

Applications:

	Bipartite graphs are extensively used in modern coding theory, especially to decode codewords received from the channel.

	Factor graphs and Tanner graphs are examples of this. 

		A Tanner graph is a bipartite graph in which the vertices on one side of the bi-partition represent digits of a codeword, and the vertices on the other side represent combinations of digits that are expected to sum to zero in a codeword without errors.

		A factor graph is a closely related belief network used for probabilistic decoding of LDPC and turbo codes.

-------

Degree

	For a vertex, the number of adjacent vertices is called the degree of the vertex and is denoted deg(v) 
		The degree sum formula for a bipartite graph states that

    	∑v∈V deg(v) = ∑u∈U deg(u) = |E|

	The degree sequence of a bipartite graph is the pair of lists each containing the degrees of the two parts 
		U and V.

	For example, the complete bipartite graph K3,5 has degree sequence (5,5,5), (3,3,3,3,3). 

	Isomorphic bipartite graphs have the same degree sequence. 

	However, the degree sequence does not, in general, uniquely identify a bipartite graph; in some cases, non-isomorphic bipartite graphs may have the same degree sequence.

	-------

	The bipartite realization problem is the problem of finding a simple bipartite graph with the degree sequence 
		being two given lists of natural numbers. 

		(Trailing zeros may be ignored since they are trivially realized by adding an appropriate number 
			of isolated vertices to the digraph.)

-------

Testing bipartiteness:

	Using DFS:

		It is possible to test whether a graph is bipartite, and to return either a two-coloring 
			(if it is bipartite) or an odd cycle (if it is not) in linear time, using depth-first search.

		The main idea is to assign to each vertex the color that differs from the color of its parent in the 
			depth-first search forest, assigning colors in a preorder traversal of the depth-first-search forest.

		This will necessarily provide a two-coloring of the spanning forest consisting of the edges connecting
			vertices to their parents, but it may not properly color some of the non-forest edges.

		-------

	 	In a depth-first search forest, one of the two endpoints of every non-forest edge is an ancestor of the 
		 	other endpoint, and when the depth first search discovers an edge of this type it should 
		 	check that these two vertices have different colors.

	 	If they do not, then the path in the forest from ancestor to descendant, together with the miscolored edge, 
	 		form an odd cycle, which is returned from the algorithm together with the result that the graph is not bipartite. 

	 		However, if the algorithm terminates without detecting an odd cycle of this type, 
	 			then every edge must be properly colored, and the algorithm returns the coloring together 
	 			with the result that the graph is bipartite

	-------

	Using BFS:

		Alternatively, a similar procedure may be used with breadth-first search in place of depth-first search. 

		Again, each node is given the opposite color to its parent in the search forest, in breadth-first order. 

		If, when a vertex is colored, there exists an edge connecting it to a previously-colored vertex with the same color, 
			then this edge together with the paths in the breadth-first search forest connecting its two 
			endpoints to their lowest common ancestor forms an odd cycle. 

		If the algorithm terminates without finding an odd cycle in this way, then it must have found a 
			proper coloring, and can safely conclude that the graph is bipartite.

	-------

	For the intersection graphs of n line segments or other simple shapes in the Euclidean plane, 
		it is possible to test whether the graph is bipartite and return either a two-coloring or an 
		odd cycle in time O (n log ⁡ n), even though the graph itself may have up to O (n^2) 
		edges.

-------

Odd cycle transversal:

	Odd cycle transversal is an NP-complete algorithmic problem that asks, given a graph G = (V,E) and a number k, 
		whether there exists a set of k vertices whose removal from G would cause the resulting graph to be bipartite.

	The name odd cycle transversal comes from the fact that a graph is bipartite if and only if it has no odd cycles. 

	Hence, to delete vertices from a graph in order to obtain a bipartite graph, one needs to "hit all odd cycle", 
		or find a so-called odd cycle transversal set. 