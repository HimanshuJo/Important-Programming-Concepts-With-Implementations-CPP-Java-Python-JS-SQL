
Intuition:
	
	It splits the search space into two halves and only keep the half that probably has the search target
		and throw away the other half that would not possibly have the answer

		In this manner we can reduce the search space to half the size at every step, until we find the target

	Binary Search help us to reduce the search time from linear O(n) to logarithmic O(log n)

	Some of the most common bugs while implementing the logic:

		When to exit the loop:
			
			should we use left < right or left <= right as the while loop condition

			Initialization of the boundary variables left and right

			How to update the boundary:
				How to choose the appropriate combination from
						left = mid,
						left = mid + 1
					and
						right = mid
						right = mid - 1

-------

Suppose we have a search space. It could be an array, a range etc.

	Usually it's sorted in ascending order. For most of the tasks, we can transform the requirement into the following
		generalized form

	Generalized form:

		def binarySearch(array) -> int:
			def condition(value) -> bool:
				pass

			left, right = 0, len(array)
			while (left < right):
				mid = left + (right - left) // 2
				if condition(mid):
					right = mid
				else:
					left = mid + 1
			return left

-------

** For most of the binary search problems, we only need to modify three parts after copy-paste this template, 
	and never have to worry about the corner cases and bugs any more:

	1. Correctly initialize the boundary values 'left' and 'right'
			Only one rule:
				set up the boundary condition to include all the possible elements

	2. Decide return value:

		Is it return left or return left - 1

		Remember this:
			After exiting the while loop, left is the minimal k satisfying the condition function

	3. Design the condition function.
		This is the most difficult and most beautiful condition and requires a lot of practice

	-------

	* Most of the time when we come across the 'minimal k satisfying condition'
		in the if condition we are manipulating right
		and else stands for left

		and we want to shrink the right boundary to be at the correct position

	* Most of the time when we come across the 'maximal k satisfying condition'
		in the if condition we are manipulating left
		and else stands for right

		and we want to extend the right boundary to be at the correct position

-------

Basic Applications:

	1. First Bad Version [Easy]

		You are a product manager and currently leading a team to develop a new product. Since each version is developed on the previous version, all the versions after a bad version are also bad

		Suppose you have n versions [1, 2, 3, .... n] and you want to find out the first bad version which causes all the following ones to be bad.

		You are given an API bool isBadVersion(version) which will return whether version is bad

		Example:

			Given n = 5, and version = 4 is the first bad version

			call isBadVersion(3) -> false
			call isBadVersion(5) -> false
			call isBadVersion(5) -> false
			call isBadVersion(4) -> true

			First we initialize left = 1 and right = n to include all the possible values.
			
			Then we notice that we don't even need to design the condition function.
				It's already given by the isBadVersion API

				Finding the first bad version is equivalent to finding the 'minimal k satisfying' isBadVersion(k) is True

			So our template can fit in very nicely

			-------

			class Solution:
				def firstBadVersion(self, n) -> int:
					left, right = 1, n
					while left < right:
						mid = left + (right - left) // 2
						# if it's the bad version we're interested in the first one therefore
						# we have to shrink the boundary here
						if isBadVersion(mid):
							right = mid
						else:
							left = mid + 1
					return left

	-------

	2. Implement int sqrt(int x) [Easy]

		Compute and return the square root of x, where x is guaranteed to be a non-negative integer.

		Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned

			Example:
				Input: 4
				Output: 2

				Input: 8
				Output: 2

		* We need to search for maximal k satisfying k^2 <= x, therefore we can easily come up with the solution

		-------

			def mySquare(x: int) -> int:
				left, right = 0, x
				while left < right:
					mid = left + (right - left) // 2
					if mid * mid <= x:
						# we have to find the maximal k value satisfying the condition
						# therefore staying just in a 'limited' left range brings us no good
						left = mid + 1
					else:
						# we are already out of the range of good values
						# we have to bring the right at the correct range
						right = mid
				return left - 1   

		In the above problem, we were searching for maximal k value instead

			maximal k satisfying condition(k) is False is just equal to the minimal k satisfying condition(k) is True

	-------

	3. Search Insert Position [Easy]

		Given a sorted and a target value return the index if the target is found.

		If not, return the index where it could be if it were inserted in order.

		We may assume there are no duplicates in the array

			Example:

				Input: [1, 3, 5, 6], 5
				Output: 2

		-------

		Very classic application of the binary search. We are looking for the minimal k value satisfying the condition
			nums[k] > target, and we can just copy-paste our template

			Notice our solution will be correct, regardless of whether the input array nums has duplicates.

			Also notice that the input target might be larger than all the elements in nums, and therefore needs to be placed at the end of the array.

			Therefore we should initialize, our right range as right = len(nums) instead of right = len(nums) - 1

		-------

			class Solution:
				def searchInsert(self, nums: List[int], target: int) -> int:
					left, right = 0, len(nums)
					while left < right:
						mid = left + (right - left) // 2
						if nums[mid] >= target:
							right = mid
						else:
							left = mid + 1
					return left