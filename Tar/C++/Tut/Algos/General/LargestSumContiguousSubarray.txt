Write an efficient program to find the sum of contiguous subarray within a one-dimensional array of numbers that has the largest sum.

e.g.:

	nums=[-2,-3,4,-1,-2,1,5,-3]
	       0  1 2  3  4 5 6  7

    maximum contiguous array sum is 7

-------

Kadane's Algorithm:

	Initialize:

		finalMax=INT_MIN
		currMax=0

	Loop for each element in the array
		a) currMax=currMax+a[i]
		b) if(finalMax<currMax)
			finalMax=currMax
		c) if(currMax<0)
			currMax=0

	return finalMax

-------

Explanation:

	The simple idea of Kadaneâ€™s algorithm is to look for all positive contiguous segments of the array 
		(currMax is used for this). 

		And keep track of maximum sum contiguous segment among all positive segments 
		(finalMax is used for this). 

	Each time we get a positive-sum compare it with finalMax and update finalMax if currMax is greater than finalMax 

    Lets take the example:
    {-2, -3, 4, -1, -2, 1, 5, -3}

    currMax = finalMax = 0

    for i=0,  a[0] =  -2
    currMax = currMax + (-2)
    Set currMax = 0 because currMax < 0

    for i=1,  a[1] =  -3
    currMax = currMax + (-3)
    Set currMax = 0 because currMax < 0

    for i=2,  a[2] =  4
    currMax = currMax + (4)
    currMax = 4
    finalMax is updated to 4 because currMax here is greater 
    than finalMax which was 0 till now

    for i=3,  a[3] =  -1
    currMax = currMax + (-1)
    currMax = 3

    for i=4,  a[4] =  -2
    currMax = currMax + (-2)
    currMax = 1

    for i=5,  a[5] =  1
    currMax = currMax + (1)
    currMax = 2

    for i=6,  a[6] =  5
    currMax = currMax + (5)
    currMax = 7
    finalMax is updated to 7 because currMax is 
    greater than finalMax

    for i=7,  a[7] =  -3
    currMax = currMax + (-3)
    currMax = 4
