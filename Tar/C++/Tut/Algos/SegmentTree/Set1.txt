Let us consider the following problem to understand Segment Trees.

	We have an array arr[0 . . . n-1]. We should be able to 
		
		1. Find the sum of elements from index l to r where 0 <= l <= r <= n-1

		2. Change value of a specified element of the array to a new value x. 
			We need to do arr[i] = x where 0 <= i <= n-1.

	-------

	Naive Solution:

		is to run a loop from l to r and calculate the sum of elements in the given range

		To update a value, simply do arr[i] = x.

		The first operation takes O(n) time and the second operation takes O(1) time

	Another Solution:

		is to create another array and store sum from start to i at the i'th index in this array

		The sum of the given range can be calculated in O(1) time, but update operation takes
			O(n)

	-------

	What if the number of query and updates are equal?

		Can we perform both the operations in O(log n) time once given the array

		We can use Segment Tree to do both the operations in O(Log n) time

-------

Representation of Segment Trees:

	1. Leaf nodes are the elements of the input array

	2. Each internal node represents some merging of the leaf nodes.

		The merging may be different for different problems.

			Here merging means sum of leaves under a node

	An array representation of a tree is used to represent Segment Trees.

		For each node at index i, the left child is at index 2*i+1
		and the right child is at index 2*i+2
		and the parent is at (i-1)/2

-------

How does Segment Trees look like in the memory:

	Like Heap, the segment tree is also represented as an array.

	The difference here is, it is not complete binary tree.

	It is rather a full binary tree(every node has 0 or 2 children)

	Unlike Heap, the last level may have gaps between nodes

-------

Construction of Segment tree from a given array:

	We can start with a segment arr[0...n-1] and every time we divide the current segment into two halves
		(if it has not yet become a segment of length 1), and call the same procedure on both the halves,
		and for each such segment, we can store the sum in the corresponding node

	All the levels of the constructed segment tree will be completely filled except for the last level

		Also, the tree will be 'Full Binary Tree' because we always divide segments in two halves at every level

		Since the constructed tree is always a full binary tree with n leaves, 
			there will be n - 1 internal nodes

		Hence the total number of nodes will be 2*n-1

-------

What is the total size of the array representing segment tree

	If n is a power of 2, then there are no dummy nodes.
		So the size of the segment tree is 2n-1 (n leaf nodes and n-1) internal nodes

	If n is not a power of 2, then the size of the tree will be 2*x-1
		where x is the smallest power of 2 greater than n

		For example, when n=10, the size of the array representing segment tree will be 2*16-1 = 31

-------

Query for Sum of given range

	Once our tree is constructed, we can get the sum of elements via the below algorithm

		int getSum(node, l, r) {
			if the range of the node is within l and r
				return value in the node
			else if the range of the node is completely outside l and r
				return 0
			else
				return getSum(node's leftChild, l, r) + getSum(node's rightChild, l, r)
		}

-------

Update a value

	Like tree construction and query operation, the update can also be done recursively.

	We are generally given an index which needs to be updated
		Let diff be the value to be added.

		We can start from the root of the segment tree and add diff to all the nodes
			which have given index in their range

		If a node doesn't have a given index in its range, we don't make any changes to that node

-------

//Program for Segment Tree operations like construction, query and update
public class SegmentTree {
	int[] st; // array that will store segment tree nodes

	// constructor to construct segment tree from the given array.
	// This constructor allocates memory for the segment tree and calls
	// constructionSTUtil()
	// to fill the allocated memory
	SegmentTree(int[] arr, int n) {
		int x = (int) (Math.ceil(Math.log(n) / Math.log(2)));
		int maxSize = 2 * (int) Math.pow(2, x) - 1; // Maximum size of the segment tree
		st = new int[maxSize];
		constructSTUtil(arr, 0, n - 1, 0);
	}

	// A recursive function that constructs Segment Tree for an array[ss..se]
	// si is index of the current node in the segment tree st

	int constructSTUtil(int[] arr, int ss, int se, int si) {
		if (ss == se) {
			st[si] = arr[ss];
			return arr[ss];
		}
		int mid = getMid(ss, se);
		st[si] = constructSTUtil(arr, ss, mid, si * 2 + 1) + constructSTUtil(arr, mid + 1, se, si * 2 + 2);
		return st[si];
	}

	int getMid(int s, int e) {
		return s + (e - s) / 2;
	}

	void updateValue(int[] arr, int n, int i, int newVal) {
		if (i < 0 || i > n - 1) {
			System.out.println("Invalid Input");
			return;
		}
		int diff = newVal - arr[i];
		arr[i] = newVal;
		updateValueUtil(0, n - 1, i, diff, 0);
	}

	/*
	 * A recursive function to update the nodes which have the given index in their
	 * range. The following are the parameters st, si, ss and se are same as
	 * getSumUtil() i -> index of the element to be updated. This index is in the
	 * input array diff ->value to be added to all the nodes which have i in their
	 * range
	 */

	void updateValueUtil(int ss, int se, int i, int diff, int si) {
		if (i < ss || i > se) {
			return;
		}
		st[si] = st[si] + diff;
		if (se != ss) {
			int mid = getMid(ss, se);
			updateValueUtil(ss, mid, i, diff, 2 * si + 1);
			updateValueUtil(mid + 1, se, i, diff, 2 * si + 2);
		}
	}

	// Return the sum of the elements in a range from index qs (query start) to qe
	// (query end)
	// It mainly uses getSumUtil()

	int getSum(int n, int qs, int qe) {
		if (qs < 0 || qe > n - 1 || qs > qe) {
			System.out.println("Invalid Input");
			return -1;
		}
		return getSumUtil(0, n - 1, qs, qe, 0);
	}

	/*
	 * A recursive function to get the sum of the values in a given range of the
	 * array. The following are the parameters for this function
	 * 
	 * st -> Pointer to the segment tree si -> Index of the current node in the
	 * segment tree. Initially 0 is passed as root is always at index 0 ss & se ->
	 * starting and the ending indexes of the segment represented by the current
	 * node, i.e. st[si] qs & qe -> starting and ending indexes of the query range
	 */

	int getSumUtil(int ss, int se, int qs, int qe, int si) {
		if (qs <= ss && qe >= se) {
			return st[si];
		}
		if (se < qs || ss > qe) {
			return 0;
		}
		int mid = getMid(ss, se);
		return getSumUtil(ss, mid, qs, qe, 2 * si + 1) + getSumUtil(mid + 1, se, qs, qe, 2 * si + 2);
	}

	public static void main(String[] args) {
		int[] arr = { 1, 3, 5, 7, 9, 11 };
		int n = arr.length;
		SegmentTree tree = new SegmentTree(arr, n);
		System.out.println(tree.getSum(n, 1, 3));
		tree.updateValue(arr, n, 1, 10);
		System.out.println(tree.getSum(n, 1, 3));
	}
}
