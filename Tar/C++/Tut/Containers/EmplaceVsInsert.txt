
In C++, all containers (vector, stack, queue, set, map, etc) support both insert and emplace operations.

The advantage of emplace is, it does in-place insertion and avoids an unnecessary copy of object. 

For primitive data types, it does not matter which one we use. 

	But for objects, use of emplace() is preferred for efficiency reasons.

-------

#include<bits/stdc++.h>
using namespace std;

int main()
{
	// declaring map
	multiset<pair<char, int>> ms;
	
	// using emplace() to insert pair in-place
	ms.emplace('a', 24);
	
	// Below line would not compile
	// ms.insert('b', 25);	
	
	// using insert() to insert pair in-place
	ms.insert(make_pair('b', 25)); // ms.insert(pair<char, int>('b', 25))
	
	// printing the multiset
	for (auto it = ms.begin(); it != ms.end(); ++it)
		cout << " " << (*it).first << " "
			<< (*it).second << endl;

	return 0;
}

Output:

	a 24
	b 25
