
ArrayList is a part of collection framework and is present in java.util package. 

	It provides us dynamic arrays in Java. 

	Though, it may be slower than standard arrays but can be helpful in programs where 
		lots of manipulation in the array is needed.

	-------

	1. ArrayList inherits AbstractList class and implements List interface.

	2. ArrayList is initialized by a size, however the size can increase if collection grows or shrink 
		if objects are removed from the collection.

	3. Java ArrayList allows us to randomly access the list.

	4. ArrayList can not be used for primitive types, like int, char, etc.
		We need a wrapper class for such cases.

	5. ArrayList in Java can be seen as similar to vector in C++.

-------

Below are the various methods to initialize an ArrayList in Java:

	1. Initialization with add()

		Syntax:

		ArrayList<Type> str = new ArrayList<Type>();
		       str.add("Geeks");
		       str.add("for");
		       str.add("Geeks");

    -------

    Examples: Using shorthand version of this method

    // Java code to illustrate initialization
	// of ArrayList using add() method

		import java.util.*;

		public class GFG {
		    public static void main(String args[])
		    {

		        // create a ArrayList String type
		        // and Initialize an ArrayList with add()
		        ArrayList<String> gfg = new ArrayList<String>() {
		            {
		                add("Geeks");
		                add("for");
		                add("Geeks");
		            }
		        };

		        // print ArrayList
		        System.out.println("ArrayList : " + gfg);
		    }
		}

	Output:

		ArrayList : [Geeks, for, Geeks]

	-------

	2. Initialization using asList()

		Syntax:

		ArrayList<Type> obj = new ArrayList<Type>(Arrays.asList(Obj A, Obj B, Obj C, ....so on));

		-------

		Examples:

			// Java code to illustrate initialization
			// of ArrayList using asList method

			import java.util.*;

			public class GFG {
			    public static void main(String args[])
			    {
			        // create a ArrayList String type
			        // and Initialize an ArrayList with asList()
			        ArrayList<String> gfg = new ArrayList<String>(Arrays.asList
					        				  ("Geeks",
					                          "for",
					                          "Geeks"));

			        // print ArrayList
			        System.out.println("ArrayList : " + gfg);
			    }
			}

		Output:

			ArrayList : [Geeks, for, Geeks]

	-------

	3. Initialization using List.of() method

		Syntax:

		List<Type> obj = new ArrayList<>(List.of(Obj A, Obj B, Obj C, ....so on));

		-------

		Examples:

			// Java code to illustrate initialization
			// of ArrayList using List.of() method

			import java.util.*;

			public class GFG {
			    public static void main(String args[])
			    {

			        // create a ArrayList String type
			        // and Initialize an ArrayList with List.of()
			        List<String> gfg = new ArrayList<>(List.of
			        							("Geeks",
							                    "for",
							                    "Geeks"));

			        // print ArrayList
			        System.out.println("ArrayList : " + gfg);
			    }
			}

		Output:

			ArrayList : [Geeks, for, Geeks]

	-------

	4. Initialization using another Collection

		Syntax:

			List gfg = new ArrayList<>(collection);

		-------

		Examples:

			// Java code to illustrate initialization
			// of ArrayList using another collection

			import java.util.*;

			public class GFG {
			    public static void main(String args[])
			    {

			        // create another collection
			        List<Integer> arr = new ArrayList<>();
			        arr.add(1);
			        arr.add(2);
			        arr.add(3);
			        arr.add(4);
			        arr.add(5);

			        // create a ArrayList Integer type
			        // and Initialize an ArrayList with arr
			        List<Integer> gfg = new ArrayList<Integer>(arr);

			        // print ArrayList
			        System.out.println("ArrayList : " + gfg);
			    }
			}

		Output:

			ArrayList : [1, 2, 3, 4, 5]

	-------

	5. Passing a fixed length Java array to ArrayList

		List<String> fixedSizeList = Arrays.asList(new String[100]);