List (I):

    It is the child interface of Collection

    When should we go for list:

        If we want to represent a group of individual objects where:

            duplicates are allowed and

            insertion order must be preserved

    In list index plays a very important role (we can preserve the insertion order using that)

    -------

    All the methods available in Collection interface can be used happily in list in addition
        list has its own methods:

        // to insert an object at a particular index

            add(int index, Object o)

        // to add a group of objects at a specified index

            add(int index, Collection c)

        // to remove an object

            remove(Object o)  --> method coming from collection

        // to remove an element at a particular index

            remove(int index)

        // to check index of a particular element

            l.indexOf("A");  // if A occurs two times, the method will return the first occurrence

        // the last time an element appears in the list

            l.lastIndexOf("A");

        // to get an element at a particular index

            get(int index)

        // to retrieve list elements one by one

            ListIterator listIterator()  // method returns an object of ListIterator

        // to replace an element at a specified index

            set(int index, Object o)

-------

List all methods:

    1. void add(int index, Object o)

    -------

    2. boolean addAll(int index, Collection c)

    -------

    3. Object get(int index)

    -------

    4. Object remove(int index)

    -------

    // to replace the element present at a specified index with provided Object and returns old Object
    5. Object set(int index, Object new)

    -------

    6. int indexOf(Object o)  // returns index of first occurrence of 'o'

    -------

    7. int lastIndexOf(Object o)

    -------

    8. ListIterator listIterator();

-------

Collection all methods:

    1. boolean add(Object obj)

        Adds obj to the invoking collection

        Returns true if obj was added to the collection

        Returns false if obj is already a member of the collection

            or if the collection doesn't allow duplicates

    -------

    2. boolean addAll(Collection c)

        Adds all the elements of c to the invoking collection

        Returns true if the operation succeeds (i.e if the elements were added)

            otherwise it returns false

    -------

    3. void clear()

        Removes all the elements from the invoking collection

    -------

    4. boolean contains(Object obj)

        Returns true if obj is an element of the invoking collection

            otherwise it returns false

    -------

    5. boolean containsAll(Collection c)

        Returns true if the invoking collection contains all the elements of c

            otherwise it returns false

    -------

    6. boolean equals(Object obj)

        Returns true if the invoking collection and obj are equal

            otherwise it return false

    -------

    7. int hashCode()

        Returns the hash code for the invoking collection

    -------

    8. boolean isEmpty()

        Returns true if the invoking collection is empty

            otherwise, it returns false

    -------

    9. Iterator iterator()

        Returns an iterator for the invoking collection

    -------

    10. boolean remove(Object obj)

        Removes one instance of obj from the invoking collection

        Returns true if the element was removed

            otherwise it returns false

    -------

    11. boolean removeAll(Collection c)

        Removes all elements of c from the invoking collection

        Returns true if the collection changed (i.e elements were removed)

            otherwise it returns false

    -------

    12. boolean retainAll(Collection c)

        Removes all elements from the invoking collection except those in c

        Returns true if the collection changed (i.e elements were removed)

            otherwise it returns false

    -------

    13. int size()

        Returns the number of elements held in the invoking collection

    -------

    14. Object [] toArray()

        Returns an array that contains all the elements stored in the invoking collection

        The array elements are the copies of the collection elements

    -------

    15. Object [] toArray(Object array[])

        Returns an array containing only those collection elements whose type matches that of the array
