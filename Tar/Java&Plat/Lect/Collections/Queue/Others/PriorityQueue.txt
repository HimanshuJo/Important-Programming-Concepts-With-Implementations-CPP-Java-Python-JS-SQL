
A PriorityQueue is used when the objects are supposed to be processed based on the priority.

    It is known that a Queue follows the First-In-First-Out algorithm, but sometimes the
        elements of the queue are needed to be processed according to the priority,
        that’s when the PriorityQueue comes into play.

    The PriorityQueue is based on the priority heap.

    The elements of the priority queue are ordered according to the natural ordering,
        or by a Comparator provided at queue construction time, depending on which constructor is used

-------

Iterable (Interface)

    Collection (Interface) extends Iterable

        Queue (Interface) extends Collection

            Deque (Interface) extends Collection

                LinkedList (Class) implements Deque

                ArrayDeque (Class) implements Deque

            PriorityQueue (Class) implements Queue

-------

Declaration:

    public class PriorityQueue<E> extends AbstractQueue<E> implements Serializable

        where E is the type of elements held in this queue

-------

The class implements the following interfaces
    Serializable,
    Iterable<E>,
    Collection<E>,
    Queue<E>

-------

Important Points:

    PriorityQueue doesn’t permit null.

    We can’t create PriorityQueue of Objects that are non-comparable

    PriorityQueue are unbound queues.

    The head of this queue is the least element with respect to the specified ordering.

        If multiple elements are tied for least value, the head is one of those elements —
            ties are broken arbitrarily.

    Since PriorityQueue is not thread-safe, so java provides
        PriorityBlockingQueue class that implements the BlockingQueue interface
        to use in java multithreading environment.

    The queue retrieval operations
        poll,
        remove,
        peek, and element access the element at the head of the queue.

    It provides O(log(n)) time for add and poll methods.

    It inherits methods from AbstractQueue, AbstractCollection, Collection and Object class.

-------

Constructors:

    1. PriorityQueue():

        Creates a PriorityQueue with the default initial capacity (11) that orders
            its elements according to their natural ordering.

            PriorityQueue<E> pq = new PriorityQueue<E>();

    -------

    2. PriorityQueue(Collection<E> c):

        Creates a PriorityQueue containing the elements in the specified collection.

            PriorityQueue<E> pq = new PriorityQueue<E>(Collection<E> c);

    -------

    3. PriorityQueue(int initialCapacity):

        Creates a PriorityQueue with the specified initial capacity that orders its
            elements according to their natural ordering.

        PriorityQueue<E> pq = new PriorityQueue<E>(int initialCapacity);

    -------

    4. PriorityQueue(int initialCapacity, Comparator<E> comparator):

        Creates a PriorityQueue with the specified initial capacity that orders its elements
            according to the specified comparator.

        PriorityQueue<E> pq = new PriorityQueue(int initialCapacity, Comparator<E> comparator);

    -------

    5. PriorityQueue(PriorityQueue<E> c):

        Creates a PriorityQueue containing the elements in the specified priority queue.

        PriorityQueue<E> pq = new PriorityQueue(PriorityQueue<E> c);

    -------

    6. PriorityQueue(SortedSet<E> c):

        Creates a PriorityQueue containing the elements in the specified sorted set.

        PriorityQueue<E> pq = new PriorityQueue<E>(SortedSet<E> c);

-------

Example:

    The example below explains the following basic operations of the priority queue.

        1. boolean add(E element):

            This method inserts the specified element into this priority queue.

        2. public peek():

            This method retrieves, but does not remove, the head of this queue, or
                returns null if this queue is empty.

        3. public poll():

            This method retrieves and removes the head of this queue, or
                returns null if this queue is empty.

-------

Accessing the elements:

    Since Queue follows the First In First Out principle, we can access only
        the head of the queue.

    To access elements from a priority queue, we can use the peek() method.

-------

Iterating the PriorityQueue:

    There are multiple ways to iterate through the PriorityQueue.

    The most famous way is converting the queue to the array and traversing using the for loop.

    However, the queue also has an inbuilt iterator which can be used to iterate through the queue.

    -------

    Example:

        // Java program to iterate elements
        // to a PriorityQueue

        import java.util.*;

        public class PriorityQueueDemo {

            public static void main(String args[])
            {
                PriorityQueue<String> pq = new PriorityQueue<>();

                pq.add("Geeks");
                pq.add("For");
                pq.add("Geeks");

                Iterator iterator = pq.iterator();

                while (iterator.hasNext()) {
                    System.out.print(iterator.next() + " ");
                }
            }
        }

-------

Methods in PriorityQueue class

    add(E e)

        Inserts the specified element into this priority queue.

    clear()

        Removes all of the elements from this priority queue.

    comparator()

        Returns the comparator used to order the elements in this queue, or
            null if this queue is sorted according to the natural ordering of its elements.

    contains​(Object o)

        Returns true if this queue contains the specified element.

    forEach​(Consumer<? super E> action)

        Performs the given action for each element of the Iterable until all
            elements have been processed or the action throws an exception.

    iterator()

        Returns an iterator over the elements in this queue.

    offer​(E e)

        Inserts the specified element into this priority queue.

    remove​(Object o)

        Removes a single instance of the specified element from this queue, if it is present.

    removeAll​(Collection<?> c)

        Removes all of this collection’s elements that are also contained in the
            specified collection (optional operation).

    removeIf​(Predicate<? super E> filter)

        Removes all of the elements of this collection that satisfy the given predicate.

    retainAll​(Collection<?> c)

        Retains only the elements in this collection that are contained in the
            specified collection (optional operation).

    spliterator()

        Creates a late-binding and fail-fast Spliterator over the elements in this queue.

    toArray()

        Returns an array containing all of the elements in this queue.

    toArray​(T[] a)

        Returns an array containing all of the elements in this queue;
            the runtime type of the returned array is that of the specified array.

-------

Methods Declared in class java.util.AbstractQueue

    addAll(Collection<? extends E> c)

        Adds all of the elements in the specified collection to this queue.

    element()

        Retrieves, but does not remove, the head of this queue.

    remove()

        Retrieves and removes the head of this queue.

-------

Methods Declared in class java.util.AbstractCollection

    containsAll(Collection<?> c)

        Returns true if this collection contains all of the elements in the specified collection.

    isEmpty()

        Returns true if this collection contains no elements.

    toString()

        Returns a string representation of this collection.

-------

Methods Declared in interface java.util.Collection

    containsAll(Collection<?> c)

        Returns true if this collection contains all of the elements in the specified collection.

    equals(Object o)

        Compares the specified object with this collection for equality.

    hashCode()

        Returns the hash code value for this collection.

    isEmpty()

        Returns true if this collection contains no elements.

    parallelStream()

        Returns a possibly parallel Stream with this collection as its source.

    size()

        Returns the number of elements in this collection.

    stream()

        Returns a sequential Stream with this collection as its source.

    toArray(IntFunction<T[]> generator)

        Returns an array containing all of the elements in this collection,
            using the provided generator function to allocate the returned array.

-------

Methods Declared in interface java.util.Queue

    peek()

        Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.

    poll()

        Retrieves and removes the head of this queue, or returns null if this queue is empty.
