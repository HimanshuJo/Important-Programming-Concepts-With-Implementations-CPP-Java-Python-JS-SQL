
All Superinterfaces of Queue:

    Collections<E>

    Iterable<E>

-------

All known Subinterfaces:

    BlockingQueue<E>

    BlockingDeque<E>

    Deque<E>

    TransferQueue<E>

-------

All known Implementing Classes:

    1. LinkedList

    2. PriorityQueue

    3. ArrayDeque

    4. AbstractQueue

    5. ArrayBlockingQueue

    6. ConcurrentLinkedQueue

    7. DelayQueue

    8. LinkedBlockingDeque

    9. LinkedBlockingQueue

    10. LinkedTransferQueue

    11. PriorityBlockingQueue

    12. SynchronousQueue

-------

public interface Queue<E> extends Collection<E>

    A collection designed for holding elements prior to processing

    Besides basic Collection operations, queues provide additional
        insertion, extraction, and inspection operations

    Each of these methods exists in two forms:

        one throws an exception if the operation fails,

        the other returns a special value (either null or false, depending on the operation)

    The latter form of the insert operation is designed specifically for use with
        capacity-restricted Queue implementations;

        in most implementations, insert operations cannot fail

-------

Summary of Queue methods:

                    Throws exception    Returns special value (false)
        Insert        add(e)              offer(e)
        Remove        remove()            poll()
        Examine       element()           peek()

-------

Imp Points:

    Queues typically, but do not necessarily, order elements in a FIFO (first-in-first-out) manner

    Among the exceptions are priority queues, which order elements according to a
        supplied comparator, or the elements' natural ordering,

        and LIFO queues (or stacks) which order the elements LIFO (last-in-first-out)

    Whatever the ordering used, the head of the queue is that element which would be removed
        by a call to remove() or poll()

    In a FIFO queue, all new elements are inserted at the tail of the queue

    -------

    The offer method inserts an element if possible, otherwise returning false

        This differs from the Collection.add method, which can fail to add an element only
            by throwing an unchecked exception

        The offer method is designed for use when failure is a normal, rather than exceptional
            occurrence, for example, in fixed-capacity (or "bounded") queues

    -------

    The remove() and poll() methods remove and return the head of the queue

        Exactly which element is removed from the queue is a function of the queue's ordering policy,
            which differs from implementation to implementation

        The remove() and poll() methods differ only in their behavior when the queue is empty:

            the remove() method throws an exception,

            while the poll() method returns null

    The element() and peek() methods return, but do not remove, the head of the queue

    -------

    Queue implementations generally do not allow insertion of null elements,
        although some implementations, such as LinkedList, do not prohibit insertion of null

    Even in the implementations that permit it, null should not be inserted into a Queue,
        as null is also used as a special return value by the poll method to indicate that
        the queue contains no elements
