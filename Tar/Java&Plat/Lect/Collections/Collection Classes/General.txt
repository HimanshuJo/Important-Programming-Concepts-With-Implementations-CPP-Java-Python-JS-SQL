
Some of the Collection classes provide full implementations that can be used as-is.

    Others are abstract, providing skeletal implementations that are used as
        starting points for creating concrete collections.

    As a general rule, the collection classes are not synchronized, but
        it is possible to obtain synchronized versions.

-------

The core collection classes are summarized as follows:

    1. AbstractCollection

        Implements most of the Collection interface

    2. AbstractList

        Extends AbstractCollection and implements most of the List interface

    3. AbstractQueue

        Extends AbstractCollection and implements parts of the Queue interface

    4. AbstractSequentialList

        Extends AbstractList for use by a collection that uses sequential rather than random
            access of its elements

    5. LinkedList

        Implements a linked list by extending AbstractSequentialList

    6. ArrayList

        Implements a dynamic array by extending AbstractList

    7. ArrayDeque

        Implements a dynamic double-ended queue by extending AbstractCollection and implementing
            the Deque interface

    8. AbstractSet

        Extends AbstractCollection and implements most of the Set interface

    9. EnumSet

        Extends AbstractSet for use with enum elements

    10. HashSet

        Extends AbstractSet for use with a hash table

    11. LinkedHashSet

        Extends HashSet to allow insertion-order iterations

    12. PriorityQueue

        Extends AbstractQueue to support a priority-based queue

    13. TreeSet

        Implements a set stored in a tree

        It extends AbstractSet
