
Comparator:

    Comparator interface is used to order the objects of user-defined classes.

    A comparator object is capable of comparing two objects of two different classes.

    Following function compare obj1 with obj2

        Syntax:

            public int compare(Object obj1, Object obj2):

    -------

    Suppose we have an array/arraylist of our own class type, containing fields like
        rollno, name, address, DOB etc and we need to sort the array based on Roll no or name?

        Method 1:

            One obvious approach is to write our own sort() function using one of the standard algorithms.

            This solution requires rewriting the whole sorting code for different criterion like
                Roll No. and Name.

        Method 2:

            Using comparator interface- Comparator interface is used to order the objects of user-defined class.

            This interface is present in java.util package and contains 2 methods

                compare(Object obj1, Object obj2) and

                equals(Object element).

            Using comparator, we can sort the elements based on data members.

                For instance it may be on rollno, name, age or anything else.

-------

How does Collections.sort() work?

    Internally the sort method does call Compare method of the classes it is sorting.

    To compare two elements, it asks “Which is greater?”

        Compare method returns -1, 0 or 1 to say if it is less than, equal, or greater to the other.

        It uses this result to then determine if they should be swapped for its sort.

-------

Example 1:

    import java.util.*;
    import java.lang.*;
    import java.io.*;

    class Student
    {
        int rollno;
        String name, address;

        public Student(int rollno, String name, String address) {
            this.rollno = rollno;
            this.name = name;
            this.address = address;
        }

        public String toString() {

            return this.rollno + " " + this.name + " " + this.address;
        }
    }

    class Sortbyroll implements Comparator<Student> {
        // Used for sorting in ascending order of
        // roll number
        public int compare(Student a, Student b) {
            return a.rollno - b.rollno;
        }
    }

    class Sortbyname implements Comparator<Student> {
        // Used for sorting in ascending order of
        // name
        public int compare(Student a, Student b)
        {
            return a.name.compareTo(b.name);
        }
    }

    class Main {
        public static void main (String[] args) {

            ArrayList<Student> ar = new ArrayList<Student>();
            ar.add(new Student(111, "bbbb", "london"));
            ar.add(new Student(131, "aaaa", "nyc"));
            ar.add(new Student(121, "cccc", "jaipur"));

            System.out.println("Unsorted");
            for (int i=0; i<ar.size(); i++)
                System.out.println(ar.get(i));

            Collections.sort(ar, new Sortbyroll());

            System.out.println("\nSorted by rollno");
            for (int i=0; i<ar.size(); i++)
                System.out.println(ar.get(i));

            Collections.sort(ar, new Sortbyname());

            System.out.println("\nSorted by name");
            for (int i=0; i<ar.size(); i++)
                System.out.println(ar.get(i));
        }
    }
