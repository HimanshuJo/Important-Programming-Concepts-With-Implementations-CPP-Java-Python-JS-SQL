	
Comparable:

	A comparable object is capable of comparing itself with another object.

	The class itself must implements the java.lang.Comparable interface to compare its instances

	E.g.:

		Consider a movie class that has members like rating, name, year

		Suppose we wish to sort a list of Movies based on year of release

			We can then implement the Comparable interface with the Movie class and override
				the method compareTo() of Comparable Interface

-------

Example:

	import java.util.*;
	import java.io.*;

	class Movie implements Comparable<Movie> {

		private double rating;
		private String name;
		private int year;

		// method to sort the movies by year
		public int compareTo(Movie m) {
			return this.year - m.year;
		}

		// constructor
		public Movie(String nm, double rt, int yr) {
			this.name = nm;
			this.rating = rt;
			this.year = yr;
		}

		// getters methods for accessing private data
		public double getRating() {
			return rating;
		}

		public String getName() {
			return name;
		}

		public int getYear() {
			return year;
		}

		public static void main(String [] args) {
			ArrayList<Movie> list = new ArrayList<>();
			list.add(new Movie("FC", 8.4, 2013));
			list.add(new Movie("SW", 3.4, 2301));

			Collections.sort(list);
		}
	}

-------

Now suppose we want to sort the movies by their ratings and names also.

	When we make a collection element comparable (by having it implement Comparable), we get only one chance
		to implement the compareTo() method

	Hence the solution is to use the Comparator

-------

Using Comparator:

	Unlike Comparable, Comparator is external to the element type we are comparing.

	It's a separate class.

		We create separate classes (that implements Comparator) to compare by different members

		Collections class has a second sort() method and it takes Comparator

		The sort() method invokes the compare() to sort the objects

	To compare the movies by Rating, we need to do 3 things:

		1. Create a class that implements Comparator (and thus the compare() method that does the work previously
			done by the compareTo())

		2. Make an instance of the Comparator class

		3. Call the overload sort() method, giving it both the list and the instance of the class that implements
			Comparator

-------

import java.io.*;
import java.util.*;

class Movie implements Comparable<Movie> {
	private double rating;
	private String name;
	private int year;

	// used to sort the movies by year
	// here we can use the default sorting order provided by the Comparable interface
	public int compareTo(Movie m) {
		return this.year - m.year;
	}

	// Constructor
	public Movie(String nm, double rt, int yr) {
		this.name = nm;
		this.rating = rt;
		this.year = yr;
	}

	// getter methods for accessing private data
	public double getRating() {
		return rating;
	}

	public String getName() {
		return name;
	}

	public int getYear() {
		return year;
	}

	
	// class to compare the movies by ratings
	class RatingCompare implements Comparator<Movie> {
		public int compare(Movie m1, Movie m2) {
			if (m1.getRating() < m2.getRating()) return -1;
			if (m1.getRating() > m2.getRating()) return 1;
			else return 0;
		}
	}


	// class to compare the movies by name
	class NameCompare implements Comparator<Movie> {
		public int compare(Movie, m1, Movie m2) {
			return m1.getName().compareTo(m2.getName());
		}
	}

	class Main {
		public static void main(String [] args) {
			ArrayList<Movie> list = new ArrayList<>();
			list.add(new Movie("Force Awakens", 8.3, 2015));
			list.add(new Movie("Star Wars", 8.7, 1977));
			list.add(new Movie("Empire Strikes Back", 8.8, 1980));
			list.add(new Movie("Return of the jedi", 8.4, 1983));

			// here we want to sort the movies by ratings now
				// 1. Create an object of ratingCompare
				// 2. Call Collections.sort
				// 3. Print the sorted list

			System.out.println("Sorted by rating");

			RatingCompare ratingCompare = new RatingCompare();

			Collections.sort(list, ratingCompare);

			for (Movie movie : list) {
				System.out.println(movie.getRating() + " " + movie.getName() + " " + movie.getYear());
			}

			// now using Comparable to sort the movie by year
			System.out.println("\nSorted by year");

			Collections.sort(list);

			for (Movie movie : list) {
				System.out.println(movie.getYear() + " " + movie.getRating() + " " + movie.getName());
			}
		}
	}
}

Output:

	Sorted by rating

		8.3 Force Awakens 2015

		8.4 Return of the jedi 1983

		8.7 Star Wars 1977

		8.8 Empire Strikes Back 1980

	Sorted by name

		Empire Strikes Back 8.8 1980

		Force Awakens 8.3 2015

		Return of the jedi 8.4 1983

		Stars Wars 8.7 1977

	Sorted by year

		1977 8.7 Star Wars

		1980 8.8 Empire Strikes Back

		1983 8.4 Return of the Jedi

		2015 8.3 Force Awakens

-------

Summary:

	Comparable is meant for the objects with natural ordering which means the objects itself
		know how it is to be ordered

		For example Roll Numbers of the students

	Whereas, Comparator interface sorting is done througth a separate class

	-------

	Logically, Comparable interface compares "this" reference with the object specified and the
		Comparator in Java compares two different class objects provided

	-------

	If any class implements Comparable interface in Java then collections of that object either
		List or Array will be sorted automatically by using the Collections.sort() or Arrays.sort()
		method and objects will be sorted based on there natural sorting order defined by the compareTo method

	-------

	A basic differentiating feature is that using comparable we can use only one comparison

		Whereas, we can write more than one custom comparators as you want for a given type
			all using different interpretations of what sorting means

		Like in the comparable example we could just sort by only one attribute,
			i.e., year but in the comparator, we were able to use different attributes like rating, name and year as well