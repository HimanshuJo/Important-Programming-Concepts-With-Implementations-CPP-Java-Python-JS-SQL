
Beginning with JDK 8, it is possible to specify a default implementation for a
    method declared in an interface.

    Private and static interface methods also supply an implementation.

    As a result, today, an interface method is abstract only if it does not specify an implementation.

    Because 'non-default' 'non-static', 'non-private' interface methods are implicitly abstract,
        there is no need to use the abstract modifier (although you can specify it, if you like).

    -------

    Example of a functional interface:

        interface MyNumber {
            double getValue();
        }

        In this case, the method getValue( ) is implicitly abstract, and it is the only
            method defined by MyNumber.

        Thus, MyNumber is a functional interface, and its function is defined by getValue( ).

-------

A lambda expression is not executed on its own.

    Rather, it forms the implementation of the abstract method defined by the
        functional interface that specifies its target type. (e.g. double in the previous example)

    As a result, a lambda expression can be specified only in a context in which a target type is defined.

    One of these contexts is created when a lambda expression is assigned to a
        functional interface reference.

    Other target type contexts include

        variable initialization,
        return statements, and
        method arguments, to name a few.

    -------

    Example:

        interface MyNumber {
            double getValue();
        }

        // Create a reference to a MyNumber instance.
        MyNumber myNum;

        Next, a lambda expression is assigned to that interface reference:

        // Use a lambda in an assignment context.
        myNum = () -> 123.45;

    -------

    When a lambda expression occurs in a target type context, an instance of a
        class is automatically created that implements the functional interface, with the
        lambda expression defining the behavior of the abstract method declared by the
        functional interface.

        When that method is called through the target, the lambda
            expression is executed.

        Thus, a lambda expression gives us a way to transform a code segment into an object.

        In the preceding example, the lambda expression becomes the
            implementation for the getValue() method.

            As a result, the following displays the value 123.45:

            // Call getValue(), which is implemented by the previously assigned lambda expression.

            System.out.println(myNum.getValue());

    -------

    In order for a lambda expression to be used in a target type context, the type
        of the abstract method and the type of the lambda expression must be
        compatible.

        For example, if the abstract method specifies two int parameters,
            then the lambda must specify two parameters whose type either is explicitly int
            or can be implicitly inferred as int by the context.

            In general, the type and number of the lambda expression’s parameters must be
                compatible with the method’s parameters; the return types must be compatible;
                and any exceptions thrown by the lambda expression must be acceptable to the method.
