
The NavigableSet interface:

    extends SortedSet and declares the behavior of a collection that supports the
        retrieval of elements based on the closest match to a given value or values.

    NavigableSet is a generic interface that has this declaration:

        interface NavigableSet<E>

            Here, E specifies the type of objects that the set will hold.

    In addition to the methods that it inherits from SortedSet, NavigableSet adds some other
        methods

    A 'ClassCastException' is thrown when an object is incompatible with the elements
        in the set

    A 'NullPointerException' is thrown if an attempt is made to use a null object and
        null is not allowed in the set

    An 'IllegalArgumentException' is thrown if an invalid argument is used

-------

NavigableSet methods:

    1. E ceiling(E obj)

            Searches the set for the smallest element e such that
                e >= obj

            If such an element is found, it is returned

                Otherwise, null is returned

    2. Iterator<E> descendingIterator()

            Returns an iterator that moves from the greatest to least

            In other words, it returns a reverse iterator

    3. NavigableSet<E> descendingSet()

            Returns a NavigableSet that is the reverse of the invoking set

            The resulting set is backed by the invoking set

    4. E floor(E obj)

            Searches the set for the largest element e such that e <= obj

            If such an element is found, it is returned

                Otherwise, null is returned

    5. NavigableSet<E> headSet(E upperBound, boolean incl)

            Returns a NavigableSet that includes all the elements from the invoking
                set that are less than upperBound is included

            If 'incl' is true, then an element equal to upperBound is included

            The resulting set is backed by the invoking set

    6. E higher(E obj)

            Searches the set for the smallest element e such that e > obj

            If such as element is found, it is returned

                Otherwise, null is returned

    7. E lower(E obj)

            Searches the set for the largest element such that e < obj

            If such an element is found, it is returned

                Otherwise, null is returned

    8. E pollFirst()

            Returns the first element, removing the element in the process

            Because the set is sorted, this is the element with the least value

            null is returned if the set is empty

    9. E pollLast()

            Returns the last element, removing the element in the process

            Because the set is sorted, this is the element with the greatest value

            null is returned if the set is empty

    10. NavigableSet<E> subSet(E lowerBound, boolean lowIncl, E upperBound, boolean highIncl)

            Returns a NavigableSet that includes all the elements from the invoking set
                that are greater than lowerBound and less than upperBound

            If lowIncl is true, then an element equal to lowerBound is included

            If highIncl is true, then an element equal to upperBound is included

            The resulting set is backed by the invoking set.

    11. NavigableSet<E> tailSet(E lowerBouund, boolean incl)

            Returns a NavigableSet that includes all the elements from the invoking set
                that are greater then lowerBound

            If incl is true, then an element equal to lowerBound is included

            The resulting set is backed by the invoking set
