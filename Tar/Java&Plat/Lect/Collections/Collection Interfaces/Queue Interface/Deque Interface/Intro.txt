
The Deque interface extends Queue and declares the behavior of a double- ended
    queue.

    Double-ended queues can function as standard, first-in, first-out
        queues or as last-in, first-out stacks.

    Deque is a generic interface that has this declaration:

        interface Deque<E>

            Here, E specifies the type of objects that the deque will hold.

            In addition to the methods that it inherits from Queue, Deque adds some of its own methods

            Several methods throw a 'ClassCastException' when an object is
                incompatible with the elements in the deque.

            A 'NullPointerException' is thrown if an attempt is made to store a null object and
                null elements are not allowed in the deque.

            An 'IllegalArgumentException' is thrown if an invalid argument is used.

            An 'IllegalStateException' is thrown if an attempt is made to
                add an element to a fixed-length deque that is full.

            A 'NoSuchElementException' is thrown if an attempt is made to remove an
                element from an empty deque.

-------

Methods:

    1. void addFirst(E obj)

        Adds obj to the head of the deque

        Throws an 'IllegalStateException' if a capacity-restricted deque is out of space

    2. void addLast(E obj)

        Adds obj to the tail of the deque

        Throws an 'IllegalStateException' if a capacity-restricted deque is out of space

    3. Iterator<E> descendingIterator()

        Returns an iterator that moves from the tail to the head of the deque

        In other words, it returns a reverse iterator

    4. E getFirst()

        Returns the first element in the deque

        The object is not removed from the deque

        It throws 'NoSuchElementException' if the deque is empty

    5. E getLast()

        Returns the last element in the deque

        The object is not removed from the deque

        It throws 'NoSuchElementException' is the deque is empty

    6. boolean offerFirst(E obj)

        Attempts to add obj to the head of the deque

        Returns true if obj was added and false otherwise

            Therefore, this method returns false when an attempt is made to add obj
                to full, capacity-restricted deque

    7. boolean offerLast(E obj)

        Attempts to add obj to the tail of the deque

        Returns true if obj was added and false otherwise

    8. E peekFirst()

        Returns the element at the head of the deque

        It returns null if the deque is empty

        The object is not removed

    9. E peekLast()

        Returns the element at the tail of the deque

        It returns null if the deque is empty

        The object is not removed

    10. E pollFirst()

        Returns the element at the head of the deque, removing the element in the process

        It returns null if the deque is empty

    11. E pollLast()

        Returns the element at the tail of the deque, removing the element in the process

        It returns null if the deque is empty

    12. E pop()

        Returns the element at the head of the deque, removing it the process

        It throws 'NoSuchElementException' if the deque is empty

    13. void push(E obj)

        Adds obj to the head of the deque

        Throws an 'IllegalStateException' if a capacity-restricted deque is out of space

    14. E removeFirst()

        Returns the element at the head of the deque, removing the element in the process

        It throws 'NoSuchElemenetException' if the deque is empty

    15. boolean removeFirstOccurrence(Object obj)

        Removes the first occurrence of obj from the deque

        Returns true if successful and false if the deque did not contain obj

    16. E removeLast()

        Returns the element at the tail of the deque, removing the element in the process

        It throws 'NoSuchElementException' if the deque is empty

    17. boolean removeLastOccurrence(Object obj)

        Removes the last occurrence of obj from the deque

        Returns true if successful and false if the deque did not contain obj

-------

Notice that Deque includes the methods push( ) and pop( ).

    These methods enable a Deque to function as a stack.

    Also, notice the descendingIterator( ) method.

        It returns an iterator that returns elements in reverse order.

        In other words, it returns an iterator that moves from the end of the collection to the
            start.

A Deque implementation can be capacity-restricted, which means that only a limited number
    of elements can be added to the deque.

    When this is the case, an attempt to add an element to the deque can fail.

    Deque allows you to handle such a failure in two ways.

-------

First, methods such as addFirst( ) and addLast( ) throw an IllegalStateException if a
    capacity-restricted deque is full.

    Second, methods such as offerFirst( ) and offerLast( ) return false if the
        element cannot be added.
