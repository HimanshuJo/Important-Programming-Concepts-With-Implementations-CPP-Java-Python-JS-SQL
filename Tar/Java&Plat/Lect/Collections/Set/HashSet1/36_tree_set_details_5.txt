
Demo program for customized sorting:

    Suppose the requirement is to insert Integer elements into the TreeSet, where the sorting order
        is descending order

    The default natural sorting order for Integers is 'ascending order'

        TreeSet t = new TreeSet();

        t.add(10);
        t.add(0);
        t.add(15);
        t.add(20);

        System.out.println(t);  // [0, 10, 15, 20]

        // However, the required output is [20, 15, 10, 0]

        -------


        TreeSet t = new TreeSet(new MyComparator)

        class MyComparator implements Comparator {
            public int compare(Object obj1, Object obj2) {

                Integer i1 = (Integer) obj1;
                Integer i2 = (Integer) obj2;

                if (i1 < i2)
                    return 1;
                else if (i1 > i2)
                    return -1;
                else
                    return 0;
            }
        }

-------

import java.util.*;

class TreeSetDemo {
    public static void main(String[] args) {
        TreeSet t = new TreeSet(new MyComparator());
        t.add(10);
        t.add(20);
        t.add(4);
        t.add(34);
        t.add(20);
        System.out.println(t);
    }
}

class MyComparator implements Comparator {
    public int compare(Object obj1, Object obj2) {
        Integer i1 = (Integer) obj1;
        Integer i2 = (Integer) obj2;

        if (i1 < i2)
            return +1;
        else if (i1 > i2)
            return -1;
        else
            return 0;
    }
}

-------

same MyComparator class can be written in other way also:

    class MyComparator implements Comparator {
        public int compare(Object obj1, Object obj2) {
            Integer i1 = (Integer) obj1;
            Integer i2 = (Integer) obj2;

            return -i1.compareTo(i2);  // if i1.compareTo(i2) return +, then we will convert it to -
                                        // if i1.compareTo(i2) return -, then we will convert it to +

            // return +1  // [10, 20, 4, 34, 20]
                // here JVM doesn't know that the other 20 is the duplicate, it just knows that
                    MyComparator class wants to put the elements based on the insertion order

            // return -1;  // [20, 34, 4, 20, 10]
                // reverse of insertion order

            // return 0;  // [10]
                // only first inserted element will be there as rest all will be treated as duplicates
        }
    }

