import java.util.*;

class TreeSetDemo {
    public static void main(String[] args) {
        TreeSet t =  new TreeSet();

        // we are adding homogeneous StringBuffer objects
        t.add(new StringBuffer("A"));
        t.add(new StringBuffer("Z"));
        t.add(new StringBuffer("L"));
        t.add(new StringBuffer("B"));
        System.out.println(t);
    }
}

* here the output will be
    Exception in thread "main" java.lang.ClassCastException:
        java.lang.StringBuffer cannot be cast to java.lang.Comparable

    -------

    If we are depending on default natural sorting order
        e.g. TreeSet t =  new TreeSet();

        compulsory the objects should be 'homogeneous' and 'comparable'

        if the objects are not homogeneous or the objects are not comparable
            then immediately we're going to get ClassCastException

    In the above example, first condition of 'homogeneous' objects is satisfied

        but second condition of being 'comparable' is not satisfied

            because StringBuffer objects are not comparable

    -------

    When do we say the objects are comparable:

        If the corresponding class implements 'Comparable' interface

        String class implements Comparable (I)

        However, StringBuffer doesn't implements Comparable (I)
