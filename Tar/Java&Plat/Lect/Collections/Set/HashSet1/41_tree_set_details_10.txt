
Demo program for customized sorting to a custom class

-------

import java.util.*;

class ComparableComparatorClass {

    public static void main(String[] args) {
        Employee e1 = new Employee("nag", 100);
        Employee e2 = new Employee("balaiha", 200);
        Employee e3 = new Employee("chiru", 300);
        Employee e4 = new Employee("venki", 400);
        Employee e5 = new Employee("nag", 100);

        TreeSet t =  new TreeSet();
        t.add(e1);
        t.add(e2);  // here internally obj1.compareTo(obj2);
        t.add(e3);
        t.add(e4);
        t.add(e5);
        System.out.println(t);

        TreeSet k = new TreeSet(new MyComparator());
        k1.add(e1);
        k1.add(e2);
        k1.add(e3);
        k1.add(e4);
        k1.add(e5);
        System.out.println(k);  // [chiru--50, nag--100, vinki--150, balaiha--200]
    }
}

class Employee implements Comparable {

    String name;
    int eid;

    Employee(String name, int eid) {
        this.name = name;
        this.eid = eid;
    }

    public String toString() {
        return name + "--" + eid;
    }

    public int compareTo(Object obj) {
        int eid1 = this.eid;  // first person's emp id
        Employee e = (Employee) obj;  // we've to convert the obj to Employee type
        int eid2 = e.eid;  // second person's emp id

        if (eid1 > eid2)
            return +1;
        else if (eid1 < eid2)
            return -1;
        else
            return 0;
    }
}

class MyComparator implements Comparator {

    public int compare(Object obj1, Object obj2) {
        Employee e1 = (Employee) obj1;
        Employee e2 = (Employee) obj2;

        String s1 = e1.name;
        String s2 = e2.name;

        return s1.compareTo(s2);  // String class compareTo method is based on alphabetical order
    }
}
