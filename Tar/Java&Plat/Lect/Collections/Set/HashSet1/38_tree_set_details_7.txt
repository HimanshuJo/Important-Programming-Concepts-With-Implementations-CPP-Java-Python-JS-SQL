
Adding StringBuffer elements to the TreeSet:

    my required sorting is 'Alphabetical Order'

    -------

    TreeSet t = new TreeSet(new MyComparator());

    t.add(new StringBuffer("A"));
    t.add(new StringBuffer("Z"));
    t.add(new StringBuffer("K"));
    t.add(new StringBuffer("L"));
    System.out.println(t);  // [A, K, L, Z]

    class MyComparator implements Comparator {
        public int compare(Object obj1, obj2) {
            // here we've to convert StringBuffer objects into String; as
                // for the String we've the default natural sorting order

            String s1 = obj1.toString(); // if internal object is StringBuffer, we can't perform typecasting
                        // if we're trying to typecast StringBuffer to String, ClassCastException will occur

            String s2 = obj2.toString();

            return s1.compareTo(s2);
        }
    }

    -------

    Here if I remove new MyComparator, immediately JVM will throw errors,
        as default natural sorting is not defined for StringBuffer

        Therefore compulsory we should go for customized sorting

-------

import java.util.*;

class TreeSetDemo {
    public static void main(String[] args) {
        TreeSet t = new TreeSet(new MyComparator());
        t.add(new StringBuffer("A"));
        t.add(new StringBuffer("Z"));
        t.add(new StringBuffer("K"));
        t.add(new StringBuffer("L"));
        System.out.println(t);
    }
}

class MyComparator implements Comparator {
    public int compare(Object obj1, Object obj2) {
        String s1 = obj1.toString();
        String s2 = obj2.toString();
        return s1.compareTo(s2);
    }
}

-------

* If we are depending on default natural sorting; compulsory the object should be
    homogeneous and comparable

* If we're defining our own customizable sorting, the objects need not be comparable (e.g. StringBuffer)
