
// Check if a number is Prime


-------

// Get all prime factors of a number


-------

// Get largest prime factor of a number

-------

// get all possible combinations of numbers in an array and print their sum

-------

// Add two numbers represented by two arrays

	Given two arrays A[0...n-1] and B[0...m-1] of size n and m respectively, representing two numbers such that
		every element of arrays represent a digit.

	For example, A[] = {1, 2, 3} and B[] = {2, 1, 4} representing 123 and 214 respectively.

	The task is to find the sum of both the numbers.
		In the above case, answer is 337

	Examples:
		
		Input: n = 3, m = 3
			   a[] = {1, 2, 3}
			   b[] = {2, 1, 4}

	    Output:	337

    -------

    The idea is to start traversing both the arrays simultaneously from the end until we reach the 0th index of either
    	of the array.

    	While traversing each elements of the array, add elements of both the array and carry from the previous sum

    	Now store the unit digit of the sum and forward the carry for the next index sum.

    	While adding the 0th index element if the carry left, then append it to the beginning of the number.

    		Example:

    			Step 0:

	    			arr1 [] = {9, 3, 9}

	    			arr2 [] = {6, 1}

	    				Initial carry = 0
	    				Initial ans = 0

				Step 1:

					adding the elements at the last index in both the arrays (if available)

						sum = 9 + 1 = 10
						carry = 1
						ans = 10 % 10 = 0

				Step 2:

					adding the elements at last index - 1 in both the arrays (if available)

						sum = 3 + 6 = 9
						adding previous carry to the sum:
							sum = 9 + 1 = 10
						carry = 1
						current ans = 10 % 10 = 0

						we will append the current ans to the previous ans
							ans = 00

				Step 3:

					Now in the 2nd array the elements are finished, and in arr1 there are still elements and the carry is still remaining
						so we will add the element at this index with the carry to append it to our final result

						sum = 9 + 1 (carry) = 10
						carry = 1
						current ans = 10 % 10 = 0

						we will append the current ans to the previous and
							ans = 000

					-------

					Since now all the elements in the both the arrays have already been added, so at this point we can
						append the carry to our ans

						final ans = 1000

	-------

	import java.io.*;

	class CFG {
		// Size of a[] is greater then b[], it will be made sure by the wrapper function
		static int calSumUtil(int[] a, int[] b, int n, int m) {
			int[] sum = new int[n];
			int i = n - 1, j = m - 1, k = n - 1;
			int carry = 0, s = 0;

			// until we are reaching the beginning of the second array
			// we are comparing for the second array because we have already compared the size of
			// the array in our wrapper function
			while (j >= 0) {
				// finding the sum of the corresponding element
				s = a[i] + b[j] + carry;
				sum[k] = (s % 10);
				carry = s / 10;
				k--;
				i--;
				j--;
			}

			// if the size of the second array is less than the first array
			while (i >= 0) {
				// add carry to the first array elements
				s = a[i] + carry;
				sum[k] = (s % 10);
				carry = s / 10;
				i--;
				k--;
			}
			int ans = 0;
			// if there is carry on adding 0 index elements append 1 to the total sum
			if (carry == 1) {
				ans = 10;
			}
			// converting array into number
			for (i = 0; i <= n - 1; ++i) {
				ans += sum[i];
				ans *= 10;
			}
			return ans / 10;
		}

		// wrapper function
		static int calSum(int[] a, int[] b, int n, int m) {
			// making the first array which have greater number of elements or have larger size
			if (n >= m) {
				return calSumUtil(a, b, n, m);
			} else {
				return calSumUtil(a, b, m, n);
			}
		}
	}

