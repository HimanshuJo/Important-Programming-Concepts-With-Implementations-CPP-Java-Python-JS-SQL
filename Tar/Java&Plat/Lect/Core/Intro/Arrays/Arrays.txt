
Array in Java:

    An array in Java can contain multiple elements, depending on how the object was created.

    In order to obtain the Java Array Length, we need to use the ‘array length attribute’,

        public class ArrayLengthJava {
            public static void main(String[] args) {

                String[] myArray = { "I", "Love", "Music" };

                int arrayLength = myArray.length; // array length attribute

                System.out.println("The length of the array is: " + arrayLength);
            }
        }

    It must be noted, that Java Array Object does not have a method to get its length.

-------

Searching for a value using Array Length in Java:

    we can use the length of the array to loop through all the elements and to determine
        whether the specific value is present.

    -------

    public class ArrayLengthJava {

        private static boolean arrayContainsValue(String[] myArray, String lookForValue)
        {
            if (myArray != null) {
                int arrayLength = myArray.length;
                for (int i = 0; i <= arrayLength - 1; i++) {
                    String value = myArray[i];
                    if (value.equals(lookForValue)) {
                        return true;
                    }
                }
            }
            return false;
        }

        public static void main(String[] args)
        {
            String[] JavaArray = { "I", "Love", "Music" };
            System.out.println(arrayContainsValue(JavaArray, "Love"));
            System.out.println(arrayContainsValue(JavaArray, "Guitar"));
        }
    }

-------

Searching for the lowest value in Array:

    public class ArrayLengthJava {

        private static int minValue(int[] myArray) {
            int minValue = myArray[0];
            int arrayLength = myArray.length;

            for (int i = 1; i <= arrayLength - 1; i++)
            {
                int value = myArray[i];
                if (value < minValue)
                {
                    minValue = value;
                }
            }
            return minValue;
        }

        public static void main(String[] args)
        {
            int[] JavaArray = { 28, 46, 69, 10 };
            System.out.println("The min value in the array: " + minValue(JavaArray));
        }
    }

    -------

    int k = Arrays.stream(nums).min().getAsInt();

-------

Searching for the highest value in Array:

    public class ArrayLengthJava {

        private static int maxValue(int[] myArray)
        {
            int maxValue = myArray[0];
            int arrayLength = myArray.length;
            for (int i = 1; i <= arrayLength - 1; i++)
            {
                int value = myArray[i];
                if (value > maxValue)
                {
                    maxValue = value;
                }
            }
            return maxValue;
        }

        public static void main(String[] args)
        {
            int[] JavaArray = { 29, 46, 69, 10 };
            System.out.println("The max value in the array: " + maxValue(JavaArray));
        }
    }

-------

Sort an Array in Descending order Java:

import java.util.Arrays;
import java.util.Collections;

class SortArrayExample {

    public static void main(String[] args)
    {

    Integer[] intArray = new Integer[]
    {  // intArray is of Object type
        new Integer(15),
        new Integer(9),
        new Integer(16),
        new Integer(2),
        new Integer(30)
    };

    // Sorting int Array in descending order
    Arrays.sort(intArray, Collections.reverseOrder());

    // Displaying elements of int Array
    System.out.println("Int Array Elements in reverse order:");

    for (int i = 0; i < intArray.length; i++)
       System.out.println(intArray[i]);

    // String Array
    String[] stringArray = new String[] { "FF", "PP", "AA", "OO", "DD" };

    // Sorting String Array in descending order
    Arrays.sort(stringArray, Collections.reverseOrder());

    // Displaying elements of String Array
    System.out.println("String Array Elements in reverse order:");
    for (int i = 0; i < stringArray.length; i++)
       System.out.println(stringArray[i]);
    }
}

-------

Reverse an int array in Java:

    To reverse an int array, we swap items until we reach the midpoint

    for(int i = 0; i < my_array.length / 2; i++)
    {
        int temp = my_array[i];
        my_array[i] = my_array[my_array.length - i - 1];
        my_array[my_array.length - i -1] = temp;
    }

-------

System.arraycopy()

    Syntax:

        public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)

            src: denotes the source array

            srcPos: is the index from copying starts

            dest: denotes the destination array

            destPos: is the index from which the copied elements are placed in the destination array

            length: the length of the subarray to be copied

    -------

    public class Test {
        public static void main(String[] args) {
            int a[] = {1, 2, 3, 4};
            int b[] = new int[a.length];

            System.arraycopy(a, 0, b, 0, a.length);

            // changing b[] to verify that b[] is different from a[]
            b[0]++;

            System.out.println("contents of a[] ");
            for (int i = 0; i < a.length; ++i) {
                System.out.println(a[i] + " ");
            }

            System.out.println("\n\nContents of b[] ");
            for (int i = 0; i < b.length; ++b) {
                System.out.println(b[i] + " ");
            }
        }
    }

    Output

        Contents of a[] 
        1 8 3 

        Contents of b[] 
        2 8 3

-------

Arrays.copyOf()

    If we want to copy the first few elements of an array or full copy of the array, we can use this method

    Syntax:

        public static int[] copyOf(int[] original, int newLength)

    -------

    import java.util.Arrays;

    class CFG {
        public static void main(String[] args) {
            int[] a = {1, 2, 3, 4};

            int[] b = Arrays.copyOf(a, 3);

            b[0]++;

            System.out.println("Contents of a[] ");
            for (int i = 0; i < a.length; ++i) {
                System.out.println(a[i] + " ");
            }

            System.out.println("\n\nContents of b[]");
            for (int i = 0; i < b.length; ++i) {
                System.out.println(b[i] + " ");
            }
        }
    }

    Output

        Contents of a[] 
        1 8 3 

        Contents of b[] 
        2 8 3

-------

Arrays.copyOfRange()

    This method copies the specified range of the specified array into a new array

        public static int[] copyOfRange(int[] original, int from, int to)

            original: This is the array from which a range is to be copied

            from: This is the initial index of the range to be copied

            to: This is the final index of the range to be copied, 'exclusive'

    -------

    import java.util.Arrays;

    class CFG {
        public static void main(String[] args) {
            int[] a = {1, 2, 3, 4, 5};

            int[] b = Arrays.copyOfRange(a, 2, 6);

            System.out.println("Contents of a[] ");

            for (int i = 0; i < a.length; ++i)
                System.out.println(a[i] + " ");

            System.out.println("\n\nContents of b[] ");

            for (int i = 0; i < b.length; ++i)
                System.out.println(b[i] + " ");
        }
    }

    Output

        Contents of a[] 
        1 8 3 5 9 10 

        Contents of b[] 
        3 5 9 10
